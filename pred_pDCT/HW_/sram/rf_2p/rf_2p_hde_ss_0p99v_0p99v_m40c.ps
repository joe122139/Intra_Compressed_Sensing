%!PS-Adobe-3.0
% datasheet_memcomp Version: 4.0.5-beta19
%!PS-Adobe-3.0
% common_memcomp Version: 4.0.5-beta22
% lang compiler Version: 4.1.6-beta1 Jul 19 2012 13:55:19
%%BoundingBox: 0 0 612 792
%%Creator: post
%%DocumentData: Clean8Bit
%%DocumentPaperSizes: Letter
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%For: ARM 
%%EndComments

%%BeginProlog

% TableRow sets the table row height
% Expects dy on the stack
/TableRow {
  /tablerow exch def
} def


% ArrowRight prints an arrow pointing to the right
% Expects text x y on the stack
/ArrowRight {
  newpath
  moveto
  -2.5 1 rmoveto
  2.5 -1 rlineto
  -2.5 -1 rlineto
  stroke
} def


% ArrowLeft prints an arrow pointing to the left
% Expects text x y on the stack
/ArrowLeft {
  newpath
  moveto
  2.5 1 rmoveto
  -2.5 -1 rlineto
  2.5 -1 rlineto
  stroke
} def


% ArrowUp prints an arrow pointing up
% Expects text x y on the stack
/ArrowUp {
  newpath
  moveto
  1 -2.5 rmoveto
  -1 2.5 rlineto
  -1 -2.5 rlineto
  stroke
} def


% ArrowDown prints an arrow pointing down
% Expects text x y on the stack
/ArrowDown {
  newpath
  moveto
  1 2.5 rmoveto
  -1 -2.5 rlineto
  -1 2.5 rlineto
  stroke
} def


% CenterLabel prints text centered at the x,y
% centers on x only
% Expects text subscript x y on the stack
/CenterLabel {
  moveto
  /subscr exch def      % save the subscript
  /txt exch def         % save the text
  txt stringwidth pop   % string x on stack
  subscr stringwidth pop % subscr x on stack
  add 2 div 0 exch sub   %  0-dx/2 on stack
  0 rmoveto
  txt show
  0 -2 rmoveto
  subscr show
} def


% LeftLabel prints text to the left of the x,y
% centers on x only
% Expects text subscript x y on the stack
/LeftLabel {
  moveto
  /subscr exch def      % save the subscript
  /txt exch def         % save the text
  txt stringwidth pop   % string x on stack
  subscr stringwidth pop % subscr x on stack
  add 0 exch sub         %  0-dx on stack
  0 rmoveto
  txt show
  0 -2 rmoveto
  subscr show
} def


% RightLabel prints text to the right of the x,y
% Expects text subscript x y on the stack
/RightLabel {
  moveto
  exch
  show
  0 -2 rmoveto
  show
} def


% CenterText prints text centered at the x,y
% centers on x only
% Expects text x y on the stack
/CenterText {
  moveto
  dup stringwidth pop   % string x on stack
  2 div 0 exch sub      % string 0-x/2 on stack
  0 rmoveto
  show
} def


% Table2start begins a 2 column table.
% Expects 5 values on the stack: w1 w2 xs ys dy
% (col widths xstart ystart at upper left of table and height of row)
/Table2Start {
  TableRow % uses yrow on stack
  /tabley exch def
  /tablex exch def
  /table2width exch def
  /table1width exch def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def

 
% Table2End ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/Table2End {
  1 setlinewidth
  tablex tabley
  table1width table2width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  tabley % return y
} def


% Table2DoubleLine doubles up the line at the bottom of a box
% Expects nothing on the stack
/Table2DoubleLine {
  newpath
  tablex tabley moveto
  table1width 0 rlineto
  table2width 0 rlineto
  1.5 setlinewidth
  stroke
} def


% Table2Verticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/Table2Verticals {
  % complete the box for each
  newpath
  tablex tabley moveto
  table1width 0 rmoveto
  0 tablerow rlineto
  0.5 setlinewidth
  stroke

  % bottom
  newpath
  tablex tabley moveto
  table1width 0 rlineto
  table2width 0 rlineto
  0.5 setlinewidth
  stroke

  1 setlinewidth
} def


% Table2CC prints centered strings at the top of a 2 column table.
% Expects string string on the stack
/Table2CC {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table2Verticals

  % set fonts for this row
  TextFont setfont

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  % col 1
  tablex table1width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

} def


% Table2LC prints one left aligned string and one centered string
% Expects 2 strings on the stack
/Table2LC {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table2Verticals

  % set fonts for this row
  TextFont setfont

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  % col 1
  tablex 3 add
  tabley 3 add  % string x+2 y+3 on stack
  moveto
  show

} def


% Table2LCMicron prints one left aligned string and one centered string
% The centered string has a micron symbol at the end of it.
% Expects 2 strings on the stack
/Table2LCMicron {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table2Verticals

  % col 2 width
  TextFont setfont
  dup stringwidth pop        % dx of string on stack
  /Symbol findfont 12 scalefont setfont
  (\155) stringwidth pop    % dx of symbol u on stack
  add                        % dx of number with mu
  TextFont setfont
  (m) stringwidth pop        % dx of m on stack
  add                        % dx of entire box contents on stack
  2 div                      % dx/2 on stack

  % col 2
  tablex table1width add table2width 2 div add   % xcenter of square on stack
  exch sub
  tabley 3 add  % string x y+3 on stack
  moveto
  TextFont setfont
  show
  /Symbol findfont 12 scalefont setfont
  (\155) show
  TextFont setfont
  (m) show

  % col 1
  tablex 3 add
  tabley 3 add  % string x+2 y+3 on stack
  moveto
  show

} def


% Table2LL prints two left aligned strings
% at the top of a 2 column table.
% Expects 2 string (text) on the stack
/Table2LL {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table2Verticals

  % set fonts for this row
  TextFont setfont

  % col 2
  tablex table1width add
  tabley 3 add  % string x y+3 on stack
  moveto
  ( ) show
  show

  % col 1
  tablex
  tabley 3 add  % string x y+3 on stack
  moveto
  ( ) show
  show

} def


% Table2Header prints the header to the table
% Expects string string on the stack
/Table2Header {
  tablex tabley moveto
  table1width table2width add 0 rlineto 
  0 0 tablerow sub rlineto
  0 table1width table2width add sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray
  fill
  1.0 setgray
  Table2CC
  0 setgray
} def


/Table4Header {
  tablex tabley moveto
  table1width table2width add table3width add table4width add 0 rlineto 
  0 0 tablerow sub rlineto
  0 table1width table2width add table3width add table4width add sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray
  fill
  1.0 setgray
  /TextSuperScriptFont /Helvetica findfont 8 scalefont def
  Table4CC
  0 setgray
} def


/CenterTextSuperScript{
   moveto
  /sqSuper exch def
  /mUnit exch def
  dup stringwidth pop   % string x on stack
  0 exch sub      % string 0-x/2 on stack
  0 rmoveto
  show

  mUnit () ne{
    2 0 rmoveto
    (\()show
    /Symbol findfont 8 scalefont setfont
    (\155) show
    TextSuperScriptFont setfont
    mUnit show
    TextFont setfont
    sqSuper () eq {
    (\))show
    }if
  }if
    
  sqSuper () ne {
    0 4 rmoveto
    TextSuperScriptFont setfont
    sqSuper show
    0 -4 rmoveto
    TextFont setfont
    (\)) show
  } if
} def


/Table4CC {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table4Verticals

  % set fonts for this row
  TextFont setfont

  % col 4
  tablex table1width add table2width add table3width add table4width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterTextSuperScript

  % col 3
  tablex table1width add table2width add table3width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterTextSuperScript

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterTextSuperScript

  % col 1
  tablex table1width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

} def

% Table4Verticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/Table4Verticals {
  % complete the box for each
  newpath
  tablex tabley moveto
  table1width 0 rmoveto
  0 tablerow rlineto
  0 tablerow neg rmoveto
  table2width 0 rmoveto
  0 tablerow rlineto
  0 tablerow neg rmoveto
  table3width 0 rmoveto
  0 tablerow rlineto
  0 tablerow neg rmoveto
  table4width 0 rmoveto
  0 tablerow rlineto
  0.5 setlinewidth
  stroke

  % bottom
  newpath
  tablex tabley moveto
  table1width 0 rlineto
  table2width 0 rlineto
  table3width 0 rlineto
  table4width 0 rlineto
  0.5 setlinewidth
  stroke

  1 setlinewidth
} def

% Table4LC prints one left aligned string and one centered string
% Expects 4 strings on the stack
/Table4LC {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table4Verticals

  % set fonts for this row
  TextFont setfont

  %col 4
  tablex table1width add table2width add table3width add table4width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  %col 3 
  tablex table1width add table2width add table3width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  % col 1
  tablex 3 add
  tabley 3 add  % string x+2 y+3 on stack
  moveto
  show

} def

% Table4End ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/Table4End {
  1 setlinewidth
  tablex tabley
  table1width table2width add table3width add table4width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  tabley % return y
} def

% Table4Start begins a 4 column table.
% Expects 7 values on the stack: w1 w2 xs ys dy
% (col widths xstart ystart at upper left of table and height of row)
/Table4Start {
  TableRow % uses yrow on stack
  /tabley exch def
  /tablex exch def
  /table4width exch def
  /table3width exch def
  /table2width exch def
  /table1width exch def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def


% Table1CornerStart begins a 2 column table of 1 process corners.
% Expects 5 values on the stack: w1 ... wn xs ys dy
% (col widths xstart ystart at upper left of table and height of row)
/Table1CornerStart {
  TableRow % uses yrow on stack
  /tabley exch def
  /tablex exch def
  /table5width 0 def
  /table4width 0 def
  /table3width 0 def
  /table2width exch def
  /table1width exch def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def

 
% Table1CornerEnd ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/Table1CornerEnd {
  1 setlinewidth
  tablex tabley
  table1width table2width add table3width add table4width add table5width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  tabley % return y
} def


% Table1CornerVerticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/Table1CornerVerticals {
  % complete the box for each

  0.5 setlinewidth


  % between col 1 and 2
  newpath
  tablex tabley moveto
  table1width 0 rmoveto
  0 tablerow rlineto
  stroke

  % bottom
  newpath
  tablex tabley moveto
  table1width 0 rlineto
  table2width 0 rlineto
  table3width 0 rlineto
  table4width 0 rlineto
  table5width 0 rlineto
  stroke

  1 setlinewidth
} def


% Table1CornerRow prints centered strings
% Expects 3 strings on the stack
%   col 1 item, col 1 superscript, 1 corner values
/Table1CornerRow {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table1CornerVerticals

  % set fonts for this row
  TextFont setfont

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999

  % save the superscript
  /super exch def

  % col 1
  tablex 5 add
  tabley 3 add  % string x+5 y+3 on stack
  moveto
  TextFont setfont
  show

  % do the superscript
  super () ne {
    0 4 rmoveto
    TextSuperscriptFont setfont
    super show
    TextFont setfont
  } if

} def


% Table1CornerFirstCol prints the header on the first column
% Expects string xc on the stack
% Expects tabley to be at the bottom of the square
% Expects tablerow to be the height of a double box
/Table1CornerFirstCol {
  tabley tablerow 2 div add 3 sub  % string xc yc on stack
  CenterText
} def


% Table1CornerCornerCol prints the header on the first column
% Expects string string string xc on the stack
% Expects tabley to be at the bottom of the square
% Expects tablerow to be the height of a double box
/Table1CornerCornerCol {
  /xc exch def
  /temp exch def
  /volt exch def

  % first line
  TextFont setfont
  xc tabley 3 add tablerow 2 div add % string xc y on stack
  CenterText

  % next line width
  volt stringwidth pop
  (V, ) stringwidth pop add
  temp stringwidth pop add
  (oC) stringwidth pop add
  2 div
  xc exch sub
  tabley 5 add moveto

  % next line display
  /saved_font TextFont def
  volt show
  (V, ) show
  temp show
  /Symbol findfont text_size scalefont setfont
  (\260) show
  /TextFont saved_font def
  TextFont setfont
  (C) show

} def


% Table1CornerHeader prints the header to the table
% First string is over the first column.
% Then 3 strings for each column such as:
%    Fast Process
%      1.1V, 0oC
% where we supply the 'V,' and 'degrees C'.
/Table1CornerHeader {
  (Pin)   % column headings
  (Slow Process) (0.99) (-40)

  /tablerow tablerow tablerow add def  % Double the y size

  % make a box around the header area
  tablex tabley moveto
  table1width table2width add table3width add table4width add table5width add 0 rlineto 
  0 0 tablerow sub rlineto
  table1width table2width add table3width add table4width add table5width add 0 exch sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray % gray fill the box
  fill

  % White lines and text
  1.0 setgray

  /tabley tabley tablerow sub def

  % do the vertical lines between columns
  Table1CornerVerticals

  % Column 1 header
  tablex table1width add table2width 2 div add Table1CornerCornerCol

  % Pin column header
  tablex table1width 2 div add Table1CornerFirstCol

  % back to black lines and text
  0 setgray

  % Restore the row height
  /tablerow tablerow 2 div def
} def


% TableD1CornerStart begins a 2 column table of 1 double process corners.
% Expects values on the stack: pin_width corn1_1 corn1_2 
%   corn2_1 corn2_2 corn3_1 corn3_2 corn4_1 corn4_2 xs ys dy
% (col widths xstart ystart at upper left of table and height of row)
/TableD1CornerStart {
  TableRow % uses yrow on stack
  /tabley exch def
  /tablex exch def
  /table4_2_width 0 def
  /table4_1_width 0 def
  /table3_2_width 0 def
  /table3_1_width 0 def
  /table2_2_width 0 def
  /table2_1_width 0 def
  /table1_2_width exch def
  /table1_1_width exch def
  /tablep_width exch def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def

 
% TableD1CornerEnd ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/TableD1CornerEnd {
  1 setlinewidth
  tablex tabley
  tablep_width
  table1_1_width add table1_2_width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  tabley % return y
} def


% TableD1CornerVerticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/TableD1CornerVerticals {
  % complete the box for each

  0.5 setlinewidth


  % single in corner 1
  tableheader 1 ne {
    newpath
    tablex tabley moveto
    tablep_width
    table1_1_width add
    0 rmoveto
    0 tablerow rlineto
    stroke
  } if
  % single between pin and first corner
  newpath
  tablex tabley moveto
  tablep_width 0 rmoveto
  0 tablerow rlineto
  stroke

  % bottom
  newpath
  tablex tabley moveto
  tablep_width
  table1_1_width add table1_2_width add
  table2_1_width add table2_2_width add
  table3_1_width add table3_2_width add
  table4_1_width add table4_2_width add
  0 rlineto
  stroke

  1 setlinewidth
} def


% TableD1CornerRow prints centered strings
% Expects 3 strings on the stack
/TableD1CornerRow {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  TableD1CornerVerticals

  % set fonts for this row
  TextFont setfont


  % corner 1
  tablex tablep_width add
  table1_1_width add table1_2_width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999
  tablex tablep_width add
  table1_1_width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999

  % pin name
  tablex 5 add
  tabley 3 add  % string x+5 y+3 on stack
  moveto
  TextFont setfont
  show

} def


% TableD1CornerDRow prints centered strings
% The pin description is broken into 2 rows for this one.
% Expects 10 strings on the stack
/TableD1CornerDRow {

  % Save the old tablerow
  /olddy tablerow def
  % We will use a wider one that is almost twice as big
  /tablerow tablerow tablerow add 2 sub def
  /yup 9 def

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  TableD1CornerVerticals

  % set fonts for this row
  TextFont setfont

  % corner 1
  tablex tablep_width add
  table1_1_width add table1_2_width 2 div add
  tabley yup add  % string xcenter y+3 on stack
  CenterText999
  tablex tablep_width add
  table1_1_width 2 div add
  tabley yup add  % string xcenter y+3 on stack
  CenterText999

  % pin name in two rows
  tablex 5 add
  tabley 3 add
  moveto
  TextFont setfont
  show
  tablex 5 add
  tabley 13 add
  moveto
  show

  % restore the y height of the row
  /tablerow olddy def

} def


% TableD1CornerFirstCol prints the header on the first column
% Expects string xc on the stack
% Expects tabley to be at the bottom of the square
% Expects tablerow to be the height of a double box
/TableD1CornerFirstCol {
  tabley tablerow 2 div add 3 sub  % string xc yc on stack
  CenterText
} def


% TableD1CornerCornerCol prints the header on the corner
% Expects (Fast) (1.1) (125) xct xcl xcr on the stack
% ... xcenter for top, xcenter for left, xcenter for right
% Expects tabley to be at the bottom of the square
% Expects tablerow to be 4 times the real tablerow
/TableD1CornerCornerCol {
  /xcr exch def
  /xcl exch def
  /xct exch def
  /temp exch def
  /volt exch def
  /h tablerow 4 div def

  % first line (Fast Process)
  xct
  tabley h add h add h add 3 add % string xc y on stack
  CenterText

  % next line width (1.10V, 0oC)
  volt stringwidth pop
  (V, ) stringwidth pop add
  temp stringwidth pop add
  (oC) stringwidth pop add
  2 div
  xct exch sub
  tabley h add h add 5 add % string xc y on stack
  moveto

  % next line display (1.10V, 0oC)
  /saved_font TextFont def
  volt show
  (V, ) show
  temp show
  /Symbol findfont text_size scalefont setfont
  (\260) show
  /TextFont saved_font def
  TextFont setfont
  (C) show

  % Puse Width display
  (Pulse) xcl tabley h add 3 add CenterText
  (Width) xcl tabley 5 add CenterText

  % Voltage display
  (Voltage) xcr tabley 3 add h 2 div add CenterText

} def


% Centers converts 3 values to the 3 needed centers
% Expects xleft width1 width2 on stack
% Returns xtc xlc xrc
/Centers {
  /w2 exch def
  /w1 exch def
  /l exch def

  l w1 add               % xtc on stack
  l w1 2 div add         % xtc xlc on stack
  l w1 add w2 2 div add  % xtc xlc xrc on stack
} def


% TableD1CornerHeader prints the header to the table
% Expects nothing on the stack
% First string is over the first column.
% Then 3 strings for each column such as:
%    Fast Process
%      1.1V, 0oC
% where we supply the 'V,' and 'degrees C'.
/TableD1CornerHeader {
  (Pin)     % pin column heading
  (Symbol)  % var column heading
  (Slow Process) (0.99) (-40)
  /tablerow tablerow 4 mul def  % 4* the y size

  % Create a box, fill it with black
  tablex tabley moveto
  tablep_width
  table1_1_width add table1_2_width add
  table2_1_width add table2_2_width add
  table3_1_width add table3_2_width add
  table4_1_width add table4_2_width add
  0 rlineto 
  0 0 tablerow sub rlineto
  tablep_width
  table1_1_width add table1_2_width add
  table2_1_width add table2_2_width add
  table3_1_width add table3_2_width add
  table4_1_width add table4_2_width add
  0 exch sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray
  fill

  % do the text in almost white
  1.0 setgray
  /tabley tabley tablerow sub def
  /tableheader 1 def
  TableD1CornerVerticals
  /tableheader 0 def

  tablex tablep_width add
  table1_1_width table1_2_width Centers % string string string xtc xlc xrc on stack
  TableD1CornerCornerCol

  tablex tablep_width 2 div add TableD1CornerFirstCol

  % back to black, back to normal table row height
  0 setgray
  /tablerow tablerow 4 div def
} def


% TableT1CornerStart begins a 2 column table of 1 double process corners.
% Expects nothing on the stack
% Uses pagey line_left global vars
/TableT1CornerStart {
  14 TableRow                % row height
  /found999 (no) def         % figure out illegal ema states 
  /tabley pagey def          % starting x,y of table
  /tablex line_left def
  /table4_2_width 0 def     % column widths
  /table4_1_width 0 def
  /table3_2_width 0 def     % column widths
  /table3_1_width 0 def
  /table2_2_width 0 def     % column widths
  /table2_1_width 0 def
  /table1_2_width 44 def     % column widths
  /table1_1_width 44 def
  /tablet_width 80 def
  /tablep_width 124 def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def


% EMAIlegalFootnote
% Expects nothing on the stack
% returns new page y
/EMAIllegalFootnote {
  /tabley pagey 10 sub def
  tablex tabley moveto
  TextFont setfont
  (Timing value of ** indicates illegal EMA setting for this corner.) show
} def

 
% TableT1CornerEnd ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/TableT1CornerEnd {
  1 setlinewidth
  tablex tabley
  tablep_width tablet_width add
  table1_1_width add table1_2_width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  found999 (yes) eq
  { EMAIllegalFootnote } if
  tabley % return y
} def


% TableT1CornerVerticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/TableT1CornerVerticals {
  % complete the box for each

  0.5 setlinewidth

  % single in corner 1
  tableheader 1 ne {
    newpath
    tablex tabley moveto
    tablep_width tablet_width add
    table1_1_width add
    0 rmoveto
    0 tablerow rlineto
    stroke
  } if

  % double between symbol and first corner
  newpath
  tablex tabley moveto
  tablep_width tablet_width add 1 sub 0 rmoveto
  0 tablerow rlineto
  stroke
  newpath
  tablex tabley moveto
  tablep_width tablet_width add 1 add 0 rmoveto
  0 tablerow rlineto
  stroke

  % single between pin and symbol
  newpath
  tablex tabley moveto
  tablep_width 0 rmoveto
  0 tablerow rlineto
  stroke

  % bottom
  newpath
  tablex tabley moveto
  tablep_width tablet_width add
  table1_1_width add table1_2_width add
  table2_1_width add table2_2_width add
  table3_1_width add table3_2_width add
  table4_1_width add table4_2_width add
  0 rlineto
  stroke

  1 setlinewidth
} def

% CenterText999 prints text centered at the x,y
% '999' is changed to **
% centers on x only
% Expects text x y on the stack
/CenterText999 {
  moveto
  dup (999.000) eq
  {                   % replace string if == '999.000'
    pop
    (**)
    % found999 (yes) def
  } if
  dup stringwidth pop   % string x on stack
  2 div 0 exch sub      % string 0-x/2 on stack
  0 rmoveto
  show
} def


% TableT1CornerRow prints centered strings
% Expects 3 strings on the stack
%   pin  pin-superscript  symbol symbol-subscript
%   1 corners with min max for each
/TableT1CornerRow {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  TableT1CornerVerticals

  % set fonts for this row
  TextFont setfont

  % corner 1
  tablex tablep_width add tablet_width add
  table1_1_width add table1_2_width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999
  tablex tablep_width add tablet_width add
  table1_1_width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999

  % symbol subscript
  /subs exch def

  % symbol name
  /symbol exch def

  % calculate width
  TextFont setfont
  symbol stringwidth pop
  TextSuperscriptFont setfont
  subs stringwidth pop
  add 2 div                % width/2 now on stack

  % show
  tablex tablep_width add tablet_width 2 div add
  exch sub          % xcenter-width/2 on stack
  tabley 4 add      % x y+4 on stack
  moveto
  TextFont setfont
  symbol show
  TextSuperscriptFont setfont
  0 -2 rmoveto
  subs show

  % save the superscript
  /super exch def

  % pin name
  tablex 3 add
  tabley 3 add  % string x+3 y+3 on stack
  moveto
  TextFont setfont
  show

  % do the superscript
  super () ne {
    0 4 rmoveto
    TextSuperscriptFont setfont
    super show
    TextFont setfont
  } if

} def


% TableT1CornerDRow prints centered strings
% Expects strings on the stack
%   pin pin  pin-superscript  symbol symbol-subscript
%   1 corners with min max for each
/TableT1CornerDRow {

  % Save the old tablerow
  /olddy tablerow def
  % We will use a wider one that is almost twice as big
  /tablerow tablerow tablerow add 2 sub def
  /yup 9 def

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  TableT1CornerVerticals

  % set fonts for this row
  TextFont setfont

  % corner 1
  tablex tablep_width add tablet_width add
  table1_1_width add table1_2_width 2 div add
  tabley yup add  % string xcenter y+3 on stack
  CenterText999
  tablex tablep_width add tablet_width add
  table1_1_width 2 div add
  tabley yup add  % string xcenter y+3 on stack
  CenterText999

  % symbol subscript
  /subs exch def

  % symbol name
  /symbol exch def

  % calculate width
  TextFont setfont
  symbol stringwidth pop
  TextSuperscriptFont setfont
  subs stringwidth pop
  add 2 div                % width/2 now on stack

  % show
  tablex tablep_width add tablet_width 2 div add
  exch sub          % xcenter-width/2 on stack
  tabley yup add 1 add      % x y+1+yup on stack
  moveto
  TextFont setfont
  symbol show
  TextSuperscriptFont setfont
  0 -2 rmoveto
  subs show

  % save the superscript
  /super exch def

  % pin name
  tablex 3 add
  tabley 3 add  % string x+3 y+3 on stack
  moveto
  TextFont setfont
  show

  % do the superscript
  super () ne {
    0 4 rmoveto
    TextSuperscriptFont setfont
    super show
    TextFont setfont
  } if

  tablex 3 add
  tabley olddy add
  moveto
  show

  % restore the row height
  /tablerow olddy def

} def


% TableT1CornerFirstCol prints the header on the first column
% Expects string xc on the stack
% Expects tabley to be at the bottom of the square
% Expects tablerow to be the height of a double box
/TableT1CornerFirstCol {
  tabley tablerow 2 div add 3 sub  % string xc yc on stack
  CenterText
} def


% TableT1CornerCornerCol prints the header on the corner
% Expects (Fast) (1.1) (125) xct xcl xcr on the stack
% ... xcenter for top, xcenter for left, xcenter for right
% Expects tabley to be at the bottom of the square
% Expects tablerow to be 4 times the real tablerow
/TableT1CornerCornerCol {
  /xcr exch def
  /xcl exch def
  /xct exch def
  /temp exch def
  /volt exch def
  /h tablerow 3 div def

  % first line (Fast Process)
  xct
  tabley h add h add 3 add % string xc y on stack
  TextFont setfont
  CenterText

  % next line width (1.10V, 0oC)
  volt stringwidth pop
  (V, ) stringwidth pop add
  temp stringwidth pop add
  (oC) stringwidth pop add
  2 div
  xct exch sub
  tabley h add 5 add % string xc y on stack
  moveto

  % next line display (1.10V, 0oC)
  /saved_font TextFont def
  volt show
  (V, ) show
  temp show
  /Symbol findfont text_size scalefont setfont
  (\260) show
  /TextFont saved_font def
  TextFont setfont
  (C) show

  % Puse Width display
  (Min) xcl tabley 5 add CenterText

  % Voltage display
  (Max) xcr tabley 5 add CenterText

} def


% TableT1CornerHeader prints the header to the table
% Expects nothing on the stack
% First string is over the first column.
% Second string is over the symbol column.
% Then 3 strings for each column such as:
%    Fast Process
%      1.1V, 0oC
% where we supply the 'V,' and 'degrees C'.
/TableT1CornerHeader {
  (Pin)     % pin column heading
  (Symbol)  % var column heading
  (Slow Process) (0.99) (-40)

  % Setup the fonts for the heading
  /TextFont /Helvetica-Bold findfont text_size scalefont def

  /tablerow tablerow 3 mul def  % 3* the y size

  % Create a box, fill it with black
  tablex tabley moveto
  tablep_width tablet_width add
  table1_1_width add table1_2_width add
  0 rlineto 
  0 0 tablerow sub rlineto
  tablep_width tablet_width add
  table1_1_width add table1_2_width add
  0 exch sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray
  fill

  % do the text in white
  1.0 setgray
  /tabley tabley tablerow sub def
  /tableheader 1 def
  TableT1CornerVerticals
  /tableheader 0 def

  tablex tablep_width add tablet_width add
  table1_1_width table1_2_width Centers % string string string xtc xlc xrc on stack
  TableT1CornerCornerCol

  tablex tablep_width add tablet_width 2 div add TableT1CornerFirstCol

  tablex tablep_width 2 div add TableT1CornerFirstCol

  % back to black, back to normal table row height
  0 setgray
  /tablerow tablerow 3 div def

  % Setup the fonts for the rest of the table
  /TextFont /Helvetica findfont text_size scalefont def
  /TextSuperscriptFont /Helvetica findfont 8 scalefont def
} def


% TextEnd ends a paragraph (or series of paragraphs)
% Expects nothing on the stack
% returns the new page y
/TextEnd {
  text_y    % return this 
} def


% TextBulletOn sets bullets at start of para
% Expects nothing on the stack
/TextBulletOn {
  /text_bullet true def
  /Symbol findfont text_size scalefont setfont
  (\267 ) stringwidth pop
  /text_bullet_width exch def
  TextFont setfont
  /text_bullet true def
} def


% TextBulletOff sets bullets off at start of para
% Expects nothing on the stack
/TextBulletOff {
  /text_bullet false def
} def


% TextStart initializes the paragraph stuff
% Expects left right margins y deltay on the stack
/TextStart {
  /text_dy exch def
  /text_y exch def
  /text_right exch def
  /text_left exch def
  /text_starty text_y def
  /text_bullet false def
  /text_size 10 def
  /text_indent_width 0 def
} def


% TextParaStart initializes one paragraph
% Expects nothing on the stack
/TextParaStart {

  % carrige return linefeed
  /text_y text_y text_dy sub def
  /text_x text_left def
  text_x text_y moveto

  % if bullet show and step over in x
  text_bullet {
    /Symbol findfont text_size scalefont setfont
    (\267 ) show
    TextFont setfont
    /text_x text_x text_bullet_width add def
  } if

  % text_indent does not apply to the first line
} def


% TextParaEnd ends one paragraph.
% Expects nothing on the stack
/TextParaEnd {
} def


% TextIndent sets the indent string used at start of para
% all following lines space over the indent width
% Expects string on the stack
/TextIndent {
  stringwidth pop
  /text_indent_width exch def
} def


% TextNewline does a carrige return line feed
% Expects nothing on the stack
/TextNewline {
  /text_y text_y text_dy sub def
  /text_x text_left def
  text_x text_y moveto
  text_bullet {
    text_bullet_width 0 rmoveto
    /text_x text_x text_bullet_width add def
  } if
  text_indent_width 0 gt {
    text_indent_width 0 rmoveto
    /text_x text_x text_indent_width add def
  } if
} def


% TextWord puts one word in the current paragraph
% Expects string on the stack
/TextWord {
  dup stringwidth pop    % dx on the stack
  /text_dx exch def
  text_dx text_x add     % x pos at end of word on stack
  text_right gt {        % true if word will not fit
    TextNewline
  } if                   % do newline if true
  dup ( ) eq
  text_x text_left eq
  and                     % if word is space and at left margin then pop
  {
    pop 
  } {
    show
    /text_x text_x text_dx add def
  } ifelse % else show
} def


% TextSuperscript puts a superscript word in the current paragraph
% The routine does not test for too wide, the superscript MUST
% go with the previous word.
% Expects string on the stack
/TextSuperscript {
  TextSuperscriptFont setfont
  dup stringwidth pop    % dx on the stack
  /text_x exch text_x add def
  0 4 rmoveto
  show
  0 0 text_size 2 div sub rmoveto
  TextFont setfont
} def


% TextReserveSpace makes sure there is enough space on
% the current line for the given text to be printed.
% If there isnt enough, a newline is generated.
/TextReserveSpace {
  stringwidth pop    % dx on the stack
  text_x add         % x at end of work on stack
  text_right gt {    % true if word will not fit
    TextNewline
  } if               % do newline if true
} def


% TextPiece puts words in the current paragraph
% Expects string on the stack
/TextPiece {
  TextFont setfont
  {
    % expect string to search on stack
    ( ) search   % post match pre true or string false on stack
    { TextWord TextWord }  % true display pre, display space
    { TextWord exit }      % false display string break
    ifelse
    % go around loop again with string to search on stack
  } loop
} def


% Expects string on the stack
% Uses c and s vars
/TextFourAdd {
  s 1 eq {
    % first one
    TextPiece
  } {
    s c eq {
      % last one
      ( and ) TextPiece
      TextPiece
    } {
      % a middle one
      (, ) TextPiece
      TextPiece
    } ifelse
  } ifelse
} def


% TextFourList prints from 1 to 4 things to the paragraph
% Expects 4 strings on the stack. (3 could be empty).
/TextFourList {
  /s1 exch def
  /s2 exch def
  /s3 exch def
  /s4 exch def
  /c 0 def

  % count the number of items
  s1 () ne {
    /c c 1 add def
  } if
  s2 () ne {
    /c c 1 add def
  } if
  s3 () ne {
    /c c 1 add def
  } if
  s4 () ne {
    /c c 1 add def
  } if

  % display the items
  /s 0 def
  s1 () ne {
    /s 1 s add def
    s1 TextFourAdd
  } if
  s2 () ne {
    /s 1 s add def
    s2 TextFourAdd
  } if
  s3 () ne {
    /s 1 s add def
    s3 TextFourAdd
  } if
  s4 () ne {
    /s 1 s add def
    s4 TextFourAdd
  } if

} def


% TextLine puts a complete paragraph on the page
% Expects string on the stack
/TextLine {
  dup () eq {
    % Empty, go down 1/2 line.
    pop
    /text_y text_y text_dy 2 div sub def
  } {
    % Normal string, show it
    TextParaStart
    TextPiece
    TextParaEnd
  } ifelse
} def


% TextDegree prints a degree symbol
% Expects nothing on the stack
/TextDegree {
  /TextFont /Symbol findfont text_size scalefont def
  (\260) TextPiece
  /TextFont /Helvetica findfont text_size scalefont def
} def


% TextRegistered prints a copyright symbol
% Expects nothing on the stack
/TextRegistered {
  /TextFont /Symbol findfont text_size scalefont def
  (\342) TextPiece
  /TextFont /Helvetica findfont text_size scalefont def
} def


% TextTrademark prints a degree symbol
% Expects nothing on the stack
/TextTrademark {
  /TextFont /Symbol findfont text_size scalefont def
  (\344) TextPiece
  /TextFont /Helvetica findfont text_size scalefont def
} def


% TextCopyright prints a copyright symbol
% Expects nothing on the stack
/TextCopyright {
  /TextFont /Symbol findfont text_size scalefont def
  (\343) TextPiece
  /TextFont /Helvetica findfont text_size scalefont def
} def


% LeftShow prints text to the left of the point
% Expects string x y on the stack
/LeftShow {
  moveto
  dup stringwidth pop  % string dx on stack
  0 exch sub           % 0-x on stack
  0 rmoveto
  show
} def


% LeftShowMicron prints text to the left of the point
% Expects two string x y on the stack
/LeftShowMicron {
  moveto
  dup stringwidth pop
  /Helvetica-Bold findfont title_size scalefont setfont
  /suffStringWidth exch def
  /procString exch def
  dup stringwidth pop
  /techStringWidth exch def
  /techString exch def
  suffStringWidth techStringWidth add 20 add 0 exch sub 0 rmoveto
  techString show
  /Symbol findfont title_size scalefont setfont
  (\155) show
  /Helvetica-Bold findfont title_size scalefont setfont
  (m) show
  procString show
}def

% LeftShowRedundancy prints text to the left of the point
% Expects two string x y on the stack
/LeftShowRedundancy {
  moveto
  dup stringwidth pop
  /Helvetica-Bold findfont title_size scalefont setfont
  /suffStringWidth exch def
  /textRed exch def
  suffStringWidth 20 add 0 exch sub 0 rmoveto
  textRed show
  title_size 2 div 0 exch rmoveto
  /Helvetica-Bold findfont text_size scalefont setfont
  (TM) show
  /Helvetica-Bold findfont title_size scalefont setfont
} def

  

% SectionLine does the line part of the section header
% Expects y on the stack
/SectionLine {
  /y exch def
  /y y line_above sub def
  newpath
  line_left y moveto
  line_right y lineto
  1 setlinewidth
  stroke
} def


% SectionStart prints a horizontal bar and a section header on the page
% Expects string string y on the stack
% returns the new page y
/SectionStart {
  SectionLine  % var y is set
  /y y line_below sub 10 sub def
  line_left y moveto
  /text2 exch def      % get the subtext
  /Helvetica-Bold findfont text_size scalefont setfont
  ( ) show             % space over from start of line
  show                 % display string
  text2 () ne {
    /Helvetica findfont text_size scalefont setfont
    ( \() show          % space over
    text2 show           % print the explanation
    (\)) show
  } if
  y 10 add             % return new y
} def

% MicronSectionStart prints a horizontal bar and a section header on the page
% Expects string y on the stack
% returns the new page y
/MicronSectionStart {
  SectionLine  % var y is set
  /y y line_below sub 10 sub def
  line_left y moveto
  /Helvetica-Bold findfont text_size scalefont setfont
  ( ) show             % space over from start of line
  show                 % display string

  y 10 add             % return new y
} def

/line_left 55 def
/line_right 550 def
/line_above 10 def
/line_below 10 def

% EndingCopyright prints the copyright info at the end
% of the last page.  The y location is set but the x size
% depends on the section line size.
% Expects xc y on the stack
/EndingCopyright {
  SectionLine
  /y y line_below sub def
  /xc exch def
  line_left line_right y 9 TextStart
  /text_size 7 def
  /TextFont /Helvetica findfont text_size scalefont def
TextParaStart
(Words and logos marked with ) TextPiece
TextRegistered
( or ) TextPiece
TextTrademark
( are registered trademarks or trademarks of ARM) TextPiece
TextRegistered
( in the EU and other countries, except as otherwise stated below in this\
 proprietary notice. Other brands and names mentioned herein may be the trademarks\
 of their respective owners.) TextPiece
TextParaEnd
/text_y text_y 4 sub def
(Neither the whole nor any part of the information contained in, or the\
 product described in, this document may be adapted or reproduced in any\
 material form except with the prior written permission of the copyright holder.) TextLine
/text_y text_y 4 sub def
(The product described in this document is subject to continuous developments\
 and improvements. All particulars of the product and its use contained in this\
 document are given by ARM in good faith. However, all warranties implied or \
 expressed, including but not limited to implied warranties of merchantability, or\
 fitness for purpose, are excluded.) TextLine
/text_y text_y 4 sub def
(This document is intended only to assist the reader in the use of the product. \
 ARM shall not be liable for any loss or damage arising from the use of any \
 information in this document, or any error or omission in such information, or \
 any incorrect use of the product.) TextLine
/text_y text_y 4 sub def
(Where the term ARM is used it means "ARM or any of its subsidiaries as appropriate".)  TextLine
/text_y text_y 4 sub def
(ARM reserves the right to make changes to any products and services\
 described herein, at any time without notice in order to make improvements\
 in design, performance, or presentation and to provide the best possible\
 products and services. Customers should obtain the latest specifications\
 before referencing any information, product, or service described herein,\
 except as expressly agreed in writing by and officer of ARM.) TextLine
/text_y text_y 4 sub def
(ARM does not assume any responsibility or liability arising out of the\
 application or use of any products or services described herein, except\
 as expressly agreed to in writing by and officer of ARM; nor does the\
 purchase, lease, or use of a product or service from ARM convey license\
 under any patent rights, copyrights, trademark rights, or any other of\
 the intellectual property rights of ARM or of third parties.) TextLine
} def



% CenterTextMu prints two text strings centered at the x,y
% with a mu symbol between the text strings
% centers on x only
% Expects text text x y on the stack
/CenterTextMu {
  moveto
  /text2 exch def     % save second string
  /text1 exch def     % save first string
  /Helvetica findfont 7 scalefont setfont
  text1 stringwidth pop  % width of first string
  text2 stringwidth pop  % width of second string
  (\155) stringwidth pop % width of mu
  add add               % width of 2 strings plus mu on stack
  2 div 0 exch sub      % 0-x/2 on stack
  0 rmoveto
  /Helvetica findfont 7 scalefont setfont
  text1 show
  /Symbol findfont 7 scalefont setfont
  (\155) show
  /Helvetica findfont 7 scalefont setfont
  text2 show
} def

% Expects x y scale on the stack
/ARMlogo {
  gsave
  translate
  dup scale
  0.08 0.43 0.53 setrgbcolor

  newpath
  10 10 moveto
  50 10 lineto
  60 38 lineto
  70 62 lineto
  93 117 lineto
  117 62 lineto
  70 62 lineto
  60 38 lineto
  127 38 lineto
  140 10 lineto
  180 10 lineto
  113 150 lineto
  70 150 lineto
  closepath
  fill

  newpath
  188 10 moveto
  226 10 lineto
  226 125 lineto
  250 125 lineto
  250 109 16 90 270 arcn
  250 93 lineto
  226 93 lineto
  226 67 lineto
  245 67 254 56 12 arcto
  278 10 lineto
  318 10 lineto
  278 80 lineto 
  260 109 41 270 90 arc
  188 150 lineto
  closepath
  fill

  newpath
  330 10 moveto
  367 10 lineto
  367 96 lineto
  407.5 53 lineto
  413.5 53 lineto
  454 96 lineto
  454 10 lineto
  490 10 lineto
  490 150 lineto
  454 150 lineto
  410.5 100 lineto
  367 150 lineto
  330 150 lineto
  closepath
  fill

  newpath
  1.5 setlinewidth
  507.5 142.5 7.5 0 360 arc
  stroke
  503 138 moveto
  /Helvetca-Bold findfont 12 scalefont setfont
  (R) show

  grestore
} def

% ShortCopyright will center a copyright message
% at the bottom of the page.
% Expects date page-string xcenter y on the stack
/ShortCopyright {
  /y exch def
  /xc exch def
  /page exch def
  /d exch def
  /Helvetica findfont 7 scalefont setfont
  ( LOGIC0040LL 40nm Process 0.589um^2 Bit Cell, RF-2P Datasheet, Version r1p1) xc y CenterText
  /y y 10 sub def
  (Copyright 1993-2017 ARM. All Rights Reserved.) xc y CenterText
  /y y 10 sub def
  page xc y CenterText

  % Instance name on left
  line_left y 10 add moveto
  (rf_2p_hde ) show
  d show

  % Logo on right
} def


% SymbolStart begins the part symbol
% Expects xUpperLeft yUpperLeft inPins outPins on stack
/SymbolStart {
  /symbolOutPins exch def
  /symbolInPins exch def
  /symbolY exch def
  /symbolX exch def
  /symbolCapHeight 20 def
  /symbolWidth 90 def
  /symbolPinLength 10 def
  /symbolPinSpacing 12 def
  /symbolInY symbolY symbolCapHeight sub def
  /symbolOutY
    symbolInPins symbolOutPins sub 2 div
    symbolPinSpacing mul
    symbolY exch sub symbolCapHeight sub
    def

  % box of symbol
  newpath
  symbolX symbolY moveto
  symbolWidth 0 rlineto
  symbolCapHeight 2 mul
  symbolInPins 1 sub symbolPinSpacing mul add
  0 exch sub
  0 exch rlineto
  0 symbolWidth sub 0 rlineto
  closepath
  2 setlinewidth
  stroke

  /symbolY symbolY symbolCapHeight 2 mul sub 
    symbolInPins 1 sub symbolPinSpacing mul sub
    def

} def

% SymbolEnd completes the part symbol
% Expects nothing on the stack
% Returns bottom of the symbol on the stack
/SymbolEnd {
  symbolY 12 sub symbolPinLength sub
} def

% SymbolInput puts an input pin on the part
% Expects pinName on the stack
/SymbolInput {
  dup () ne {
    % print nonblank pin
    newpath
    symbolX symbolInY moveto 
    0 symbolPinLength sub 0 rlineto
    0.5 setlinewidth
    stroke
    symbolX symbolInY moveto 
    0 symbolPinLength sub 0 rmoveto
    -2 -3 rmoveto
    dup stringwidth pop 0 exch sub
    0 rmoveto
    show
  } {
    % ignore blank pin
    pop
  } ifelse
  /symbolInPins symbolInPins 1 sub def
  /symbolInY symbolInY symbolPinSpacing sub def
} def

% SymbolOutput puts an output pin on the part
% Expects pinName on the stack
/SymbolOutput {
  dup () ne {
    newpath
    symbolX symbolOutY moveto 
    symbolWidth 0 rmoveto 
    symbolPinLength  0 rlineto
    0.5 setlinewidth
    stroke
    symbolX symbolOutY moveto 
    symbolWidth 0 rmoveto 
    symbolPinLength 0 rmoveto 
    2 -3 rmoveto
    show
  } {
    pop
  } ifelse
  /symbolOutPins symbolOutPins 1 sub def
  /symbolOutY symbolOutY symbolPinSpacing sub def
} def

% Put triangle inside, line down and string
% Expects string x y (left/right) on stack
/SymbolTriangle {
  /l exch def
  /y exch def
  /x exch def
  newpath
  x y moveto
  -3 0 rmoveto
  3 6 rlineto
  3 -6 rlineto
  0.5 setlinewidth
  stroke
  newpath
  x y moveto
  0 0 symbolPinLength sub rlineto
  stroke
  x y moveto
  0 0 symbolPinLength sub rmoveto
  0 -12 rmoveto
  l (left) eq {
    dup stringwidth pop 0 exch sub 0 rmoveto
  } if
  l (center) eq {
    dup stringwidth pop 2 div 0 exch sub 0 rmoveto
  } if
  show
} def

% SymbolClocks puts two clock pins on the bottom of the part
% Expects pinName pinName on the stack
/SymbolClocks {
  symbolX symbolWidth 2 mul 3 div add
  symbolY (right) SymbolTriangle    % string x y dir on stack
  symbolX symbolWidth 3 div add
  symbolY (left) SymbolTriangle    % string x y dir on stack
} def

% SymbolClock puts one clock pin on the bottom of the part
% Expects pinName on the stack
/SymbolClock {
  symbolX symbolWidth 2 div add
  symbolY (center) SymbolTriangle    % string x y dir on stack
} def

% Waves for frame number 1
% 82 paths, 21 strings
% Expects x y on stack
% bounds: 0.0->347.713  0.0->165.342
/Frame8 {
  gsave
  translate
  newpath
  109.056 153.8 moveto
  109.056 131.429 lineto
  0.5 setlinewidth
  stroke
  newpath
  54.056 163.8 moveto
  54.056 96.1672 lineto
  stroke
  newpath
  16.556 131.429 moveto
  49.056 131.429 lineto
  59.056 146.429 lineto
  104.056 146.429 lineto
  114.056 131.429 lineto
  159.056 131.429 lineto
  169.056 146.429 lineto
  214.056 146.429 lineto
  224.056 131.429 lineto
  269.056 131.429 lineto
  279.056 146.429 lineto
  324.056 146.429 lineto
  334.056 131.3 lineto
  346.556 131.3 lineto
  stroke
  newpath
  54.056 151.3 moveto
  109.056 151.3 lineto
  stroke
  54.056 151.3 ArrowLeft
  109.056 151.3 ArrowRight
  newpath
  109.056 151.3 moveto
  164.056 151.3 lineto
  stroke
  109.056 151.3 ArrowLeft
  164.056 151.3 ArrowRight
  newpath
  274.056 163.8 moveto
  274.056 118.042 lineto
  stroke
  newpath
  219.056 156.3 moveto
  219.056 131.429 lineto
  stroke
  newpath
  164.056 163.8 moveto
  164.056 125.163 lineto
  stroke
  newpath
  164.056 151.3 moveto
  219.056 151.3 lineto
  stroke
  164.056 151.3 ArrowLeft
  219.056 151.3 ArrowRight
  newpath
  219.056 151.3 moveto
  274.056 151.3 lineto
  stroke
  219.056 151.3 ArrowLeft
  274.056 151.3 ArrowRight
  newpath
  296.556 22.5 moveto
  296.556 0.1296 lineto
  stroke
  newpath
  76.556 22.5 moveto
  76.556 0.1296 lineto
  stroke
  newpath
  71.556 15 moveto
  16.556 15 lineto
  stroke
  newpath
  16.556 15 moveto
  71.556 15 lineto
  81.556 0 lineto
  161.556 0 lineto
  stroke
  newpath
  16.556 0 moveto
  71.556 0 lineto
  81.556 15 lineto
  161.556 15 lineto
  stroke
  newpath
  281.556 15 moveto
  291.556 15 lineto
  301.556 0 lineto
  311.556 0 lineto
  stroke
  newpath
  281.556 0 moveto
  291.556 0 lineto
  301.556 15 lineto
  311.556 15 lineto
  stroke
  newpath
  160.635 15 moveto
  288.635 15 lineto
  stroke
  newpath
  160.635 0 moveto
  288.635 0 lineto
  stroke
  newpath
  306.556 15 moveto
  346.556 15 lineto
  stroke
  newpath
  306.556 0 moveto
  346.556 0 lineto
  stroke
  newpath
  54.056 28.1768 moveto
  54.056 17.5 lineto
  stroke
  newpath
  274.056 29.4264 moveto
  274.056 17.5 lineto
  stroke
  newpath
  274.068 20.0248 moveto
  296.548 20.0248 lineto
  stroke
  274.068 20.0248 ArrowLeft
  296.548 20.0248 ArrowRight
  newpath
  54.068 20.0248 moveto
  76.548 20.0248 lineto
  stroke
  54.068 20.0248 ArrowLeft
  76.548 20.0248 ArrowRight
  newpath
  164.1 161.3 moveto
  274.056 161.3 lineto
  stroke
  164.1 161.3 ArrowLeft
  274.056 161.3 ArrowRight
  newpath
  54.388 161.294 moveto
  164.344 161.294 lineto
  stroke
  54.388 161.294 ArrowLeft
  164.344 161.294 ArrowRight
  newpath
  17.0576 100.234 moveto
  27.0576 85.2344 lineto
  stroke
  newpath
  27.0576 100.234 moveto
  37.0576 85.2344 lineto
  stroke
  newpath
  17.0576 85.2344 moveto
  27.0576 100.234 lineto
  stroke
  newpath
  27.0576 85.2344 moveto
  37.0576 100.234 lineto
  stroke
  newpath
  42.0576 105.234 moveto
  54.7592 105.234 lineto
  stroke
  42.0576 105.234 ArrowLeft
  54.7592 105.234 ArrowRight
  newpath
  37.0512 100.07 moveto
  47.712 85.4392 lineto
  stroke
  newpath
  280.423 85.2776 moveto
  47.6088 85.2776 lineto
  stroke
  newpath
  36.9128 100.002 moveto
  16.7032 100.002 lineto
  stroke
  newpath
  37.1552 85.2792 moveto
  16.9456 85.2792 lineto
  stroke
  newpath
  37.2592 85.2784 moveto
  42.2952 92.1056 lineto
  stroke
  newpath
  280.628 85.1632 moveto
  293.337 101.066 lineto
  stroke
  newpath
  42.2496 113.528 moveto
  42.2496 82.2624 lineto
  stroke
  newpath
  286.695 112.105 moveto
  286.695 84.1896 lineto
  stroke
  newpath
  17.7008 52.044 moveto
  27.7008 37.044 lineto
  stroke
  newpath
  27.7008 52.044 moveto
  37.7008 37.044 lineto
  stroke
  newpath
  17.7008 37.044 moveto
  27.7008 52.044 lineto
  stroke
  newpath
  27.7008 37.044 moveto
  37.7008 52.044 lineto
  stroke
  newpath
  42.7008 57.044 moveto
  55.2008 57.044 lineto
  stroke
  42.7008 57.044 ArrowLeft
  55.2008 57.044 ArrowRight
  newpath
  55.2008 74.6728 moveto
  55.2008 54.544 lineto
  stroke
  newpath
  37.1032 51.8104 moveto
  16.8936 51.8104 lineto
  stroke
  newpath
  37.2424 37.5048 moveto
  17.0328 37.5048 lineto
  stroke
  newpath
  37.624 37.6432 moveto
  47.9784 53.1544 lineto
  stroke
  newpath
  181.046 53.0592 moveto
  47.8328 53.0592 lineto
  stroke
  newpath
  37.4224 51.488 moveto
  47.4224 36.488 lineto
  stroke
  newpath
  180.629 37.0872 moveto
  46.7216 37.0872 lineto
  stroke
  newpath
  181.174 37.3424 moveto
  191.826 53.6144 lineto
  stroke
  newpath
  181.174 53.1432 moveto
  192.296 36.5104 lineto
  stroke
  newpath
  192.283 36.7752 moveto
  202.882 53.0152 lineto
  stroke
  newpath
  213.481 36.7752 moveto
  224.079 53.0152 lineto
  stroke
  newpath
  224.079 36.7752 moveto
  234.678 53.0152 lineto
  stroke
  newpath
  234.678 36.7752 moveto
  245.278 52.8752 lineto
  stroke
  newpath
  202.882 36.7752 moveto
  213.481 53.0152 lineto
  stroke
  newpath
  192.283 53.0152 moveto
  202.882 36.7752 lineto
  stroke
  newpath
  202.882 53.0152 moveto
  213.481 36.7752 lineto
  stroke
  newpath
  213.481 53.0152 moveto
  224.079 36.7752 lineto
  stroke
  newpath
  224.079 53.0152 moveto
  234.678 36.7752 lineto
  stroke
  newpath
  234.678 53.1544 moveto
  245.278 36.7752 lineto
  stroke
  newpath
  257.435 36.3928 moveto
  191.602 36.3928 lineto
  stroke
  newpath
  256.879 53.1768 moveto
  191.462 53.1768 lineto
  stroke
  newpath
  41.9712 65.016 moveto
  41.9712 39.4552 lineto
  stroke
  newpath
  273.962 115.439 moveto
  273.962 81.3784 lineto
  stroke
  newpath
  333.028 100.858 moveto
  293.13 100.858 lineto
  stroke
  newpath
  266.046 53.3832 moveto
  347.713 53.3832 lineto
  stroke
  newpath
  267.296 37.0288 moveto
  346.88 37.0288 lineto
  stroke
  newpath
  163.778 68.8888 moveto
  163.778 50.8488 lineto
  stroke
  newpath
  185.895 65.42 moveto
  185.895 42.0872 lineto
  stroke
  newpath
  262.84 58.1552 moveto
  275.34 58.1552 lineto
  stroke
  262.84 58.1552 ArrowLeft
  275.34 58.1552 ArrowRight
  newpath
  275.34 75.784 moveto
  275.34 55.6552 lineto
  stroke
  newpath
  262.11 66.1272 moveto
  262.11 40.5656 lineto
  stroke
  newpath
  256.879 36.9264 moveto
  267.001 53.476 lineto
  stroke
  newpath
  257.146 53.016 moveto
  267.435 36.788 lineto
  stroke
  newpath
  245.291 36.9264 moveto
  257.007 53.1552 lineto
  stroke
  newpath
  245.427 52.7384 moveto
  255.979 36.9264 lineto
  stroke
  newpath
  274.517 105.856 moveto
  287.218 105.856 lineto
  stroke
  274.517 105.856 ArrowLeft
  287.218 105.856 ArrowRight
  newpath
  166.416 56.528 moveto
  186.124 56.528 lineto
  stroke
  166.416 56.528 ArrowLeft
  186.124 56.528 ArrowRight
  /Times-Roman findfont 10 scalefont setfont
  (CLKA) () 0 135.68 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (CENA) () 0.6944 90.0368 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (AA[j]) () 0 44.2512 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (QA[i]) () 0 3.7056 LeftLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckha) 81.556 154.638 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckla) 136.556 154.638 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckha) 191.556 154.638 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckla) 246.556 154.638 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cyca_ema2) 109.056 165.342 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cyca_ema2) 219.056 165.342 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (Q1) () 86.556 6.5424 RightLabel
  /Times-Roman findfont 7 scalefont setfont
  (Q2) () 306.556 7.2888 RightLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (accqa_rd2) 65.3056 23.708 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (accqa_rd2) 285.306 23.5792 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (censa) 49.4192 110.85 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cenha) 296.503 111.162 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (ADDR1) () 108.95 44.2032 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (asa) 48.9504 63.2152 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (ADDR2) () 283.257 44.8976 CenterLabel
  /Times-Roman findfont 6.432 scalefont setfont
  (t) (aha) 174.506 61.5592 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (asa) 269.09 64.3264 CenterLabel
  grestore
} def
% Waves for frame number 1
% 110 paths, 23 strings
% Expects x y on stack
% bounds: 0.0->348.05  0.0->251.565
/Frame9 {
  gsave
  translate
  newpath
  109.056 239.761 moveto
  109.056 217.39 lineto
  0.5 setlinewidth
  stroke
  newpath
  54.056 249.761 moveto
  54.056 184.754 lineto
  stroke
  newpath
  164.81 163.729 moveto
  164.81 148.166 lineto
  stroke
  newpath
  16.556 217.39 moveto
  49.056 217.39 lineto
  59.056 232.39 lineto
  104.056 232.39 lineto
  114.056 217.39 lineto
  159.056 217.39 lineto
  169.056 232.39 lineto
  214.056 232.39 lineto
  224.056 217.39 lineto
  269.056 217.39 lineto
  279.056 232.39 lineto
  324.056 232.39 lineto
  334.056 217.261 lineto
  346.556 217.261 lineto
  stroke
  newpath
  274.056 249.761 moveto
  274.056 206.628 lineto
  stroke
  newpath
  42.5168 153.798 moveto
  42.5168 131.298 lineto
  stroke
  newpath
  219.056 239.761 moveto
  219.056 217.39 lineto
  stroke
  newpath
  164.056 249.761 moveto
  164.056 216.42 lineto
  stroke
  newpath
  43.1432 111.507 moveto
  43.1432 89.2656 lineto
  stroke
  newpath
  43.1432 109.137 moveto
  55.6432 109.137 lineto
  stroke
  43.1432 109.137 ArrowLeft
  55.6432 109.137 ArrowRight
  newpath
  38.1432 104.007 moveto
  48.1432 89.0072 lineto
  stroke
  newpath
  48.5592 89.0072 moveto
  66.7136 89.0072 lineto
  108.209 89.0072 lineto
  175.643 89.0072 lineto
  stroke
  newpath
  38.1432 89.84 moveto
  47.84 104.208 lineto
  stroke
  newpath
  48.0496 104.007 moveto
  176.383 104.007 lineto
  stroke
  newpath
  18.1432 104.266 moveto
  28.1432 89.2656 lineto
  stroke
  newpath
  28.1432 104.266 moveto
  38.1432 89.2656 lineto
  stroke
  newpath
  18.1432 89.2656 moveto
  28.1432 104.266 lineto
  stroke
  newpath
  28.1432 89.2656 moveto
  38.1432 104.266 lineto
  stroke
  newpath
  55.6432 126.895 moveto
  55.6432 106.766 lineto
  stroke
  newpath
  54.068 237.523 moveto
  109.068 237.523 lineto
  stroke
  54.068 237.523 ArrowLeft
  109.068 237.523 ArrowRight
  newpath
  109.068 237.523 moveto
  164.068 237.523 lineto
  stroke
  109.068 237.523 ArrowLeft
  164.068 237.523 ArrowRight
  newpath
  164.068 237.523 moveto
  219.068 237.523 lineto
  stroke
  164.068 237.523 ArrowLeft
  219.068 237.523 ArrowRight
  newpath
  219.068 237.523 moveto
  274.068 237.523 lineto
  stroke
  219.068 237.523 ArrowLeft
  274.068 237.523 ArrowRight
  newpath
  54.08 247.518 moveto
  163.695 247.518 lineto
  stroke
  54.08 247.518 ArrowLeft
  163.695 247.518 ArrowRight
  newpath
  164.08 247.518 moveto
  273.695 247.518 lineto
  stroke
  164.08 247.518 ArrowLeft
  273.695 247.518 ArrowRight
  newpath
  18.4464 186.159 moveto
  28.4464 171.159 lineto
  stroke
  newpath
  28.4464 186.159 moveto
  38.4464 171.159 lineto
  stroke
  newpath
  18.4464 171.159 moveto
  28.4464 186.159 lineto
  stroke
  newpath
  28.4464 171.159 moveto
  38.4464 186.159 lineto
  stroke
  newpath
  44.28 191.576 moveto
  53.9616 191.576 lineto
  stroke
  44.28 191.576 ArrowLeft
  53.9616 191.576 ArrowRight
  newpath
  38.44 185.995 moveto
  48.7528 170.587 lineto
  stroke
  newpath
  285.11 170.786 moveto
  48.1288 170.786 lineto
  stroke
  newpath
  38.3016 185.926 moveto
  18.092 185.926 lineto
  stroke
  newpath
  38.544 171.204 moveto
  18.3344 171.204 lineto
  stroke
  newpath
  38.648 171.204 moveto
  43.5448 178.921 lineto
  stroke
  newpath
  285.838 171.107 moveto
  295.422 186.941 lineto
  stroke
  newpath
  186.943 129.2 moveto
  196.943 144.819 lineto
  stroke
  newpath
  206.943 129.2 moveto
  216.943 144.819 lineto
  stroke
  newpath
  216.943 129.2 moveto
  226.943 144.819 lineto
  stroke
  newpath
  226.943 129.2 moveto
  236.943 144.685 lineto
  stroke
  newpath
  196.943 129.2 moveto
  206.943 144.819 lineto
  stroke
  newpath
  186.943 144.819 moveto
  196.943 129.2 lineto
  stroke
  newpath
  196.943 144.819 moveto
  206.943 129.2 lineto
  stroke
  newpath
  206.943 144.819 moveto
  216.943 129.2 lineto
  stroke
  newpath
  216.943 144.819 moveto
  226.943 129.2 lineto
  stroke
  newpath
  226.943 144.954 moveto
  236.943 129.2 lineto
  stroke
  newpath
  44.0544 194.337 moveto
  44.0544 170.039 lineto
  stroke
  newpath
  290.906 200.276 moveto
  290.906 169.858 lineto
  stroke
  newpath
  17.968 143.462 moveto
  27.968 128.462 lineto
  stroke
  newpath
  27.968 143.462 moveto
  37.968 128.462 lineto
  stroke
  newpath
  17.968 128.462 moveto
  27.968 143.462 lineto
  stroke
  newpath
  27.968 128.462 moveto
  37.968 143.462 lineto
  stroke
  newpath
  42.968 148.462 moveto
  55.468 148.462 lineto
  stroke
  42.968 148.462 ArrowLeft
  55.468 148.462 ArrowRight
  newpath
  55.468 166.091 moveto
  55.468 145.962 lineto
  stroke
  newpath
  37.3712 143.229 moveto
  17.1616 143.229 lineto
  stroke
  newpath
  37.5096 128.923 moveto
  17.3 128.923 lineto
  stroke
  newpath
  37.892 129.062 moveto
  48.2464 144.573 lineto
  stroke
  newpath
  178.257 144.478 moveto
  48.1008 144.478 lineto
  stroke
  newpath
  37.6904 142.906 moveto
  47.6904 127.906 lineto
  stroke
  newpath
  177.215 128.374 moveto
  46.9896 128.506 lineto
  stroke
  newpath
  176.382 128.583 moveto
  186.802 144.838 lineto
  stroke
  newpath
  177.84 144.625 moveto
  187.634 128.373 lineto
  stroke
  newpath
  181.858 159.061 moveto
  181.858 124.415 lineto
  stroke
  newpath
  38.4656 104.415 moveto
  18.0488 104.415 lineto
  stroke
  newpath
  37.7712 89.2768 moveto
  17.3544 89.2768 lineto
  stroke
  newpath
  296.048 186.836 moveto
  336.153 186.836 lineto
  stroke
  newpath
  274.173 180.065 moveto
  274.173 199.336 lineto
  stroke
  newpath
  187.215 144.833 moveto
  256.174 144.625 lineto
  stroke
  newpath
  187.215 128.894 moveto
  256.383 128.894 lineto
  stroke
  newpath
  267.215 144.415 moveto
  348.05 144.415 lineto
  stroke
  newpath
  267.424 128.999 moveto
  348.05 128.999 lineto
  stroke
  newpath
  261.823 155.326 moveto
  261.823 132.826 lineto
  stroke
  newpath
  262.274 149.99 moveto
  274.774 149.99 lineto
  stroke
  262.274 149.99 ArrowLeft
  274.774 149.99 ArrowRight
  newpath
  274.774 167.619 moveto
  274.774 147.49 lineto
  stroke
  newpath
  236.25 129.061 moveto
  246.25 144.887 lineto
  stroke
  newpath
  256.25 129.061 moveto
  267.007 144.208 lineto
  stroke
  newpath
  246.25 129.061 moveto
  256.25 144.887 lineto
  stroke
  newpath
  236.25 144.887 moveto
  246.25 129.061 lineto
  stroke
  newpath
  246.25 144.887 moveto
  256.25 129.061 lineto
  stroke
  newpath
  256.25 144.887 moveto
  267.424 128.791 lineto
  stroke
  newpath
  164.532 123.59 moveto
  164.532 108.026 lineto
  stroke
  newpath
  186.666 89.0608 moveto
  196.666 104.061 lineto
  stroke
  newpath
  206.666 89.0608 moveto
  216.666 104.061 lineto
  stroke
  newpath
  216.666 89.0608 moveto
  226.666 104.061 lineto
  stroke
  newpath
  226.666 89.0608 moveto
  236.666 103.931 lineto
  stroke
  newpath
  196.666 89.0608 moveto
  206.666 104.061 lineto
  stroke
  newpath
  186.666 104.061 moveto
  196.666 89.0608 lineto
  stroke
  newpath
  196.666 104.061 moveto
  206.666 89.0608 lineto
  stroke
  newpath
  206.666 104.061 moveto
  216.666 89.0608 lineto
  stroke
  newpath
  216.666 104.061 moveto
  226.666 89.0608 lineto
  stroke
  newpath
  226.666 104.19 moveto
  236.666 89.0608 lineto
  stroke
  newpath
  175.757 88.7912 moveto
  186.523 104.7 lineto
  stroke
  newpath
  180.587 108.01 moveto
  180.587 87.2328 lineto
  stroke
  newpath
  186.938 104.278 moveto
  255.896 104.069 lineto
  stroke
  newpath
  186.938 88.7544 moveto
  256.106 88.7544 lineto
  stroke
  newpath
  266.938 104.277 moveto
  347.773 104.277 lineto
  stroke
  newpath
  267.146 88.8608 moveto
  347.773 88.8608 lineto
  stroke
  newpath
  261.545 115.187 moveto
  261.545 92.6872 lineto
  stroke
  newpath
  261.997 109.851 moveto
  274.497 109.851 lineto
  stroke
  261.997 109.851 ArrowLeft
  274.497 109.851 ArrowRight
  newpath
  274.497 127.48 moveto
  274.497 107.351 lineto
  stroke
  newpath
  235.971 88.9216 moveto
  245.971 104.123 lineto
  stroke
  newpath
  255.971 88.9216 moveto
  266.73 104.069 lineto
  stroke
  newpath
  245.971 88.9216 moveto
  255.971 104.123 lineto
  stroke
  newpath
  235.971 104.123 moveto
  245.971 88.9216 lineto
  stroke
  newpath
  245.971 104.123 moveto
  255.971 88.9216 lineto
  stroke
  newpath
  255.966 103.999 moveto
  267.146 88.652 lineto
  stroke
  newpath
  176.382 103.999 moveto
  186.614 88.4512 lineto
  stroke
  newpath
  276.118 194.614 moveto
  291.576 194.614 lineto
  stroke
  276.118 194.614 ArrowLeft
  291.576 194.614 ArrowRight
  newpath
  166.477 109.84 moveto
  179.178 109.84 lineto
  stroke
  166.477 109.84 ArrowLeft
  179.178 109.84 ArrowRight
  newpath
  164.77 151.269 moveto
  184.478 151.269 lineto
  stroke
  164.77 151.269 ArrowLeft
  184.478 151.269 ArrowRight
  /Times-Roman findfont 10 scalefont setfont
  (CLKB) () 0 221.641 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (CENB) () 0 180.859 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (AB[j]) () 1.5872 133.387 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (DB[i]) () 1.5872 92.832 LeftLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (dsb) 49.3928 113.215 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (dhb) 173.143 114.048 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (DATA1) () 109.81 96.6328 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckhb) 81.568 240.861 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cklb) 136.568 240.861 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckhb) 191.568 240.861 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cklb) 246.568 240.861 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cycb_ema2) 109.068 251.565 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cycb_ema2) 219.068 251.565 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (censb) 50.808 196.775 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cenhb) 299.663 200.213 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (ADDR1) () 109.218 135.622 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (asb) 49.2184 154.634 CenterLabel
  /Times-Roman findfont 6.0758 scalefont setfont
  (tahb) () 173.177 154.305 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (ADDR2) () 308.108 136.733 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (DATA2) () 308.282 96.2856 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (asb) 268.525 156.162 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (dsb) 268.247 116.022 CenterLabel
  grestore
} def
% Waves for frame number 1030
% 5 paths, 3 strings
% Expects x y on stack
% bounds: 0.0->336.56  0.0->55
/Frame1030 {
  gsave
  translate

  newpath
  84.8936 25 moveto
  84.8936 0 lineto
  0.5 setlinewidth
  stroke
  newpath
  52.3936 55 moveto
  52.3936 20 lineto
  0.5 setlinewidth
  stroke
  newpath
  52.144 22.5 moveto
  84.8936 22.5 lineto
  0.5 setlinewidth
  stroke
  52.144 22.5 ArrowLeft
  84.8936 22.5 ArrowRight
  newpath
  16.56 40 moveto
  47.3936 40 lineto
  57.3936 55 lineto
  137.394 55 lineto
  147.394 40 lineto
  227.394 40 lineto
  237.394 55 lineto
  307.394 55 lineto
  317.394 40 lineto
  336.56 40 lineto
  0.5 setlinewidth
  stroke
  newpath
  16.56 0 moveto
  79.8936 0 lineto
  89.8936 15 lineto
  169.894 15 lineto
  179.894 0 lineto
  259.894 0 lineto
  269.894 15 lineto
  336.56 15 lineto
  0.5 setlinewidth
  stroke
  /Times-Roman findfont 10 scalefont setfont
  (CLKA) () 0 42.6488 LeftLabel
  (CLKB) () 0 2.6488 LeftLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cracwb_rd2) 68.1024 28.2992 CenterLabel
  grestore
} def

% Waves for frame number 1027
% 5 paths, 4 strings
% Expects x y on stack
% bounds: 0.0->336.56  0.0->91.168
/Frame1027 {
  gsave
  translate

  newpath
  84.8936 61.168 moveto
  84.8936 36.168 lineto
  0.5 setlinewidth
  stroke
  newpath
  52.3936 91.168 moveto
  52.3936 56.168 lineto
  0.5 setlinewidth
  stroke
  newpath
  52.144 58.668 moveto
  84.8936 58.668 lineto
  0.5 setlinewidth
  stroke
  52.144 58.668 ArrowLeft
  84.8936 58.668 ArrowRight
  newpath
  16.56 76.168 moveto
  47.3936 76.168 lineto
  57.3936 91.168 lineto
  137.394 91.168 lineto
  147.394 76.168 lineto
  227.394 76.168 lineto
  237.394 91.168 lineto
  307.394 91.168 lineto
  317.394 76.168 lineto
  336.56 76.168 lineto
  0.5 setlinewidth
  stroke
  newpath
  16.56 36.168 moveto
  81.2064 36.168 lineto
  91.156 51.168 lineto
  170.752 51.168 lineto
  180.702 36.168 lineto
  260.298 36.168 lineto
  270.246 51.168 lineto
  336.56 51.168 lineto
  0.5 setlinewidth
  stroke
  /Times-Roman findfont 10 scalefont setfont
  (CLKB) () 0 78.8168 LeftLabel
  (CLKA) () 0 38.8168 LeftLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cwbcra_wr2) 68.1024 64.4672 CenterLabel
  grestore
} def

%%EndProlog
%%Page: 1 1
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 570 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/pagey pagey 18 sub def
/Helvetica-Bold findfont title_size scalefont setfont
(High Density Two Port Register File RVT RVT Compiler ) rightmargin pagey LeftShow
/pagey pagey 18 sub def
( LOGIC0040LL 40nm Process 0.589um^2 Bit Cell) rightmargin pagey LeftShow
/pagey pagey 18 sub def
(1024 Words X 8 Bits, Mux 4 Instance) rightmargin pagey LeftShow
/pagey pagey 18 sub def

0.35 50 650 ARMlogo
/pagey pagey 20 sub def
/text_size 10 def
(Overview) () pagey SectionStart
/pagey exch def

leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
TextParaStart
(The Synchronous Two-Port Register File is optimized for speed and density.\
 The memory is designed to take full advantage of the ) TextPiece

(SMIC) TextPiece
( 40nmnm) TextReserveSpace
( 40nm) TextPiece
( LOGIC0040LL CMOS process.) TextPiece
TextParaEnd
() TextLine
TextParaStart
(The storage array is composed of eight-transistor\
 bit cells with fully static circuitry. The\
 register file\
 operates at a voltage of 0.99V) TextPiece
( and a junction temperature of ) TextPiece
(-40.01C) TextReserveSpace
(-40.0) TextPiece
TextDegree
(C.) TextPiece
TextParaEnd
TextEnd % returns new page y
/pagey exch def
% spaceLeft before Instance Settings 492
/text_size 10 def
(Instance Settings) () pagey SectionStart
/pagey exch def

/TextFont /Helvetica-Bold findfont text_size scalefont def
200
(LOGIC0040LL) stringwidth pop 15 add 100 1 index 1 index
 lt { exch pop } { pop } ifelse
leftmargin pagey 14 Table2Start
(Parameter) (Setting) Table2Header
Table2DoubleLine
/TextFont /Helvetica findfont text_size scalefont def
(Instance Name) (rf_2p_hde) Table2LC
(Process) (LOGIC0040LL) Table2LC
(Words) (1024) Table2LC
(Bits) (8) Table2LC
(Mux) (4) Table2LC
(Write Mask) (off) Table2LC
(Activity_factor) (50) Table2LC
(Extra Margin Adjustment) (on) Table2LC
(BIST Muxes) (off) Table2LC
(Output Drive) (6) Table2LC
(Power Routing Type) (otc) Table2LC
(Top Metal) (m5-m10) Table2LC
(Frequency) (1 MHz) Table2LC
(MVT) (RVT) Table2LC
(Retention) (on) Table2LC
(Back Biasing) (off) Table2LC
Table2End % returns the new y
/pagey exch def
% spaceLeft before description 234
(Description) () pagey SectionStart
/pagey exch def
% spaceLeft before description text begins 214

leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
( Register file access is synchronous and is triggered by the rising-edge of the clocks, \
CLKA and CLKB.  The write port (port B) input address, input data, write enable \
and chip enable are latched by the rising-edge of CLKB, respecting individual setup \
and hold times. The read port (port A) input address and chip enable are latched by the \
rising-edge of CLKA, respecting individual setup and hold times.  The two ports can \
operate completely asynchronous to each other.) TextLine
TextEnd
/pagey exch def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( A write cycle is initiated if the write port chip enable, CENB, is asserted at the rising-edge \
of CLKB.  Input data, DB, is written at the address, AB.) TextLine
TextEnd
/pagey exch def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( A read cycle is initiated if the read port chip enable CENA is asserted at the rising-edge \
of CLKA. The contents of the location specified by the address, AA, are driven on the data \
output bus, QA. The register file is allowed to access non-existing physical addresses, but \
the outputs will be unknown.) TextLine
TextEnd
/pagey exch def

() (1) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 2 2
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/text_size 10 def
(Description) (cont) pagey SectionStart
/pagey exch def
/pagey pagey 6 sub def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( In the event of a write/read collision, if COLLDISN is disabled then the write is guaranteed and the \
read data is undefined.However, if COLLDISN is enabled then the write is not guaranteed if the read \
row address and write row address match.) TextLine
TextEnd
/pagey exch def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( The read address for any given memory cycle can be identical \
to the write address of the previous memory cycle with the read data being identical to the data that \
was written from the previous memory write cycle.) TextLine
TextEnd
/pagey exch def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( A standby mode is provided for periods of non-operation (CENA=1 or CENB=1). \
The ports A and B can enter standby mode independently.  While in standby mode, \
address and data inputs are disabled; data stored in the memory is retained, but \
the memory cannot be accessed for reads or writes.) TextLine
TextEnd
/pagey exch def

% spaceLeft beginning paragraph 506
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( Memory normal mode is enabled \(RET1N=1\). \
In this mode the core and periphery power are both connected to the chip level \
power grid through Artigrid. \
There is a power sequence when the memory is put from active to selective \
precharge and back to active. Selective precharge is available for all compilers \
 except for the ROM. Before entering selective precharge, the memory must be \
put in standby mode by setting CENA=1, CENB=1.) TextLine
TextEnd
/pagey exch def
% spaceLeft beginning paragraph 416
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( Extra Margin Adjustment pins \(EMAA, EMAB\) provide the option of adding delays into \
internal timing pulses.) TextLine
TextEnd
/pagey exch def


leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
% spaceLeft beginning paragraph 380
(Refer to the user guide for a more detailed description\
 of memory operation.) TextLine
TextEnd
/pagey exch def
/text_size 10 def
(Physical Dimensions) pagey MicronSectionStart
/pagey exch def

/pagey pagey 15 sub def
75 75 75 75 leftmargin pagey 14 Table4Start
/TextFont /Helvetica-Bold findfont text_size scalefont def
(Area Type) (Width)(m)() (Height)(m)() (Area)(m)(2) Table4Header
/TextFont /Helvetica findfont text_size scalefont def
(Core) (110.215) (111.115) (12246.5) Table4LC
Table4End
/pagey exch def

leftmargin rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
(All width, height, and area dimensions are in drawn dimensions.\
 For shrink processes, this will be larger than the final silicon\
 post-shrink dimensions.) TextLine
TextEnd
/pagey exch def
/pagey pagey 20 sub def
(Symbol) () pagey SectionStart
/pagey exch def

/pagey pagey 20 sub def
/Helvetica findfont text_size scalefont setfont
255 pagey 9 2 SymbolStart
(CENA) SymbolInput
(AA[9:0]) SymbolInput
(CENB) SymbolInput
(AB[9:0]) SymbolInput
(DB[7:0]) SymbolInput
(EMAA[2:0]) SymbolInput
(EMAB[2:0]) SymbolInput
(RET1N) SymbolInput
(COLLDISN) SymbolInput
(QA[7:0]) SymbolOutput
() SymbolOutput
(CLKA) (CLKB) SymbolClocks
SymbolEnd
/pagey exch def
() (2) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 3 3
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/text_size 10 def
(Pin Description) () pagey SectionStart
/pagey exch def
/pagey pagey 15 sub def

180 350 line_left pagey 14 Table2Start
/TextFont /Helvetica-Bold findfont text_size scalefont def
(Pin) (Description) Table2Header
/TextFont /Helvetica findfont text_size scalefont def
(AA[9:0], AB[9:0]) (Read & Write Addresses \(AA[0],AB[0] = LSB\)) Table2LL
(DB[7:0]) (Data Inputs \(DB[0] = LSB\)) Table2LL
(CLKA, CLKB) (Read & Write Clocks) Table2LL
(CENA, CENB) (Read & Write Enables \(active low\)) Table2LL
(EMAA[2:0], EMAB[2:0]) (Read and Write Extra Margin Adjustment \(EMAA[0],EMAB[0] = LSB\)) Table2LL
(COLLDISN) (Allow the user to disable the internal collision detection circuitry\(active low\)) Table2LL
(RET1N) (Retention Input \(active low\)) Table2LL
(QA[7:0]) (Data Outputs \(QA[0] = LSB\)) Table2LL
Table2End
/pagey exch def

/pagey pagey 10 sub def
/text_size 10 def
(Read Cycle Timing) () pagey SectionStart
/pagey exch def
/pagey pagey 12 sub def
line_left line_right pagey 12 TextStart
/TextFont /Helvetica findfont 10 scalefont def
/TextSuperscriptFont /Helvetica findfont 10 scalefont def
(The retain timing arc is not shown in this diagram. \
Please refer to the User Guide for this compiler for a detailed timing \
diagram with the retain arc.) TextLine
TextEnd
/pagey pagey 10 sub def
leftmargin pagey 250 sub Frame8
/pagey pagey 250 sub def
() (3) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 4 4
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def

/pagey pagey 10 sub def
/text_size 10 def
(Write Cycle Timing) () pagey SectionStart
/pagey exch def
/pagey pagey 10 sub def
leftmargin pagey 290 sub Frame9
/pagey pagey 280 sub def

/pagey pagey 10 sub def
/text_size 10 def
(Write to Read Cycle Timing) () pagey SectionStart
/pagey exch def
/pagey pagey 15 sub def
leftmargin pagey 91 sub Frame1027
/pagey pagey 96 sub def

/pagey pagey 10 sub def
/text_size 10 def
(Read to Write Cycle Timing) () pagey SectionStart
/pagey exch def
/pagey pagey 15 sub def
leftmargin pagey 55 sub Frame1030
/pagey pagey 85 sub def
% headerEstimate=158
% estimate=252
% tailEstimate=84
% spaceLeft=64
() (4) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 5 5
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
(Default Timing for Cycle and Access) (units = ns) pagey SectionStart
/pagey exch def

/pagey pagey 12 sub def
% Make the text paragraph the same size as the following table
line_left line_right pagey 12 TextStart
/TextFont /Helvetica findfont 10 scalefont def
/TextSuperscriptFont /Helvetica findfont 10 scalefont def
(The timing tables shows delay values measured from\
 50% of supply to\
 50% of supply voltage.\
 The output pins are loaded with the standard load of 0.035pF.\
 Input pins are driven with a standard slew of 0.100ns from\
 10% to\
 90% of supply voltage.) TextLine
(The timing and power values are measured at input slew of 0.1ns on clock pin,\
 0.1ns on signal pins and output load 0.035pF. Default timing table is represented \
when EMAA=2 for read port and EMAB=2 for write port. Detailed timing information \
can be obtained in corresponding tables.) TextLine
TextEnd
/pagey exch def

/pagey pagey 12 sub def

TableT1CornerStart
TableT1CornerHeader
(Read Cycle [CLKA]) () (t) (cyca_ema2)  (2.543) ()  TableT1CornerRow
(Write Cycle [CLKB]) () (t) (cycb_ema2)  (2.703) ()  TableT1CornerRow
(Read Access[QA]) (1,2) (t) (accqa_rd2) (1.315) (1.623) TableT1CornerRow
(Clock[CLKA] high) () (t) (ckha) (0.227) () TableT1CornerRow
(Clock[CLKA] low) () (t) (ckla) (0.325) () TableT1CornerRow
(Clock[CLKB] high) () (t) (ckhb) (0.226) () TableT1CornerRow
(Clock[CLKB] low) () (t) (cklb) (0.325) () TableT1CornerRow
(Max Clock[CLKA] Trans) () (t) (ckra) () (0.76)  TableT1CornerRow
(Max Clock[CLKB] Trans) () (t) (ckrb) () (0.76)  TableT1CornerRow
(Tcc. read clock[CLKA] to) (write clock[CLKB]) () (t) (cracwb_rd2) (1.394) () TableT1CornerDRow
(Tcc. write clock to[CLKB]) (read clock[CLKA]) () (t) (cwbcra_wr2) (1.735) () TableT1CornerDRow
(Output load factor[QA]) (1) (K) (load_qa) () (0.864) TableT1CornerRow
TableT1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 2 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextParaStart
(1) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(Output delays and a load dependency \(Kload\) which is\
 used to calculate:) TextPiece
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(TotalDelay = FixedDelay + \(Kload x Cload\).) TextPiece
/TextFont /Helvetica findfont 8 scalefont def
TextParaEnd
TextParaStart
(2) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(Max access time is defined as the longest possible delay to\
 valid output and min access time is defined as \
 the shortest possible delay.) TextPiece
TextParaEnd
TextParaStart
TextEnd
/pagey exch def
% after table spaceLeft=232
% headerEstimate=110
% estimate=14
% tailEstimate=64
% spaceLeft=232
(Load Timing) (units = ns/pF) pagey SectionStart
/pagey exch def

/pagey pagey 12 sub def
% Make the text paragraph the same size as the following table
line_left line_right pagey 12 TextStart
/TextFont /Helvetica findfont 10 scalefont def
/TextSuperscriptFont /Helvetica findfont 10 scalefont def
TextEnd
/pagey exch def

/pagey pagey 12 sub def

TableT1CornerStart
TableT1CornerHeader
(QA load factor) () (K) (load_qa) () (0.864) TableT1CornerRow
TableT1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 2 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextParaStart
(1) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The output load factor units are ns/pF.) TextPiece
TextParaEnd
TextEnd
/pagey exch def
% headerEstimate=110
% estimate=532
% tailEstimate=64
% spaceLeft=44
() (5) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 6 6
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
(Setup and Hold Timing) (units = ns) pagey SectionStart
/pagey exch def

/pagey pagey 12 sub def
% Make the text paragraph the same size as the following table
line_left line_right pagey 12 TextStart
/TextFont /Helvetica findfont 10 scalefont def
/TextSuperscriptFont /Helvetica findfont 10 scalefont def
TextEnd
/pagey exch def

/pagey pagey 12 sub def

TableT1CornerStart
TableT1CornerHeader
(AA setup) () (t) (asa) (0.479) () TableT1CornerRow
(AA hold) () (t) (aha) (0.211) () TableT1CornerRow
(AB setup) () (t) (asb) (0.477) () TableT1CornerRow
(AB hold) () (t) (ahb) (0.193) () TableT1CornerRow
(DB setup) () (t) (dsb) (0.329) () TableT1CornerRow
(DB hold) () (t) (dhb) (0.399) () TableT1CornerRow
(CENA setup) () (t) (censa) (0.230) () TableT1CornerRow
(CENA hold) () (t) (cenha) (0.247) () TableT1CornerRow
(CENB setup) () (t) (censb) (0.230) () TableT1CornerRow
(CENB hold) () (t) (cenhb) (0.245) () TableT1CornerRow
(COLLDISN setup) () (t) (colldisnsa) (2.543) () TableT1CornerRow
(COLLDISN hold) () (t) (colldisnha) (3.647) () TableT1CornerRow
(COLLDISN setup) () (t) (colldisnsb) (2.703) () TableT1CornerRow
(COLLDISN hold) () (t) (colldisnhb) (3.861) () TableT1CornerRow
(EMAA setup) () (t) (emasa) (2.543) () TableT1CornerRow
(EMAA hold) () (t) (emaha) (3.647) () TableT1CornerRow
(EMAB setup) () (t) (emasb) (2.703) () TableT1CornerRow
(EMAB hold) () (t) (emahb) (3.861) () TableT1CornerRow
(RET1N to CLKA setup) () (t) (ret1nsa) (0.830) () TableT1CornerRow
(RET1N to CLKB setup) () (t) (ret1nsb) (0.841) () TableT1CornerRow
(RET1N to CLKA hold) () (t) (ret1nha) (2.706) () TableT1CornerRow
(RET1N to CLKB hold) () (t) (ret1nhb) (3.864) () TableT1CornerRow
(RET1N rise to) (CENA rise hold) () (t) (ret1n_cenah) (2.547) () TableT1CornerDRow
(RET1N rise to) (CENB rise hold) () (t) (ret1n_cenbh) (2.706) () TableT1CornerDRow
(RET1N fall to) (CENA rise hold) () (t) (ret1n_cenah) (0.057) () TableT1CornerDRow
(RET1N fall to) (CENB rise hold) () (t) (ret1n_cenbh) (0.057) () TableT1CornerDRow
(CENA fall to) (RET1N rise hold) () (t) (cena_ret1nh) (0.622) () TableT1CornerDRow
(CENB fall to) (RET1N rise hold) () (t) (cenb_ret1nh) (0.614) () TableT1CornerDRow
TableT1CornerEnd
/pagey exch def
() (6) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 7 7
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Timing continued) (units = ns) pagey SectionStart
/pagey exch def
/pagey pagey 12 sub def
TableT1CornerStart
TableT1CornerHeader
% spaceLeft=554 after continuation
(CENA fall to) (RET1N fall hold) () (t) (cena_ret1nh) (2.706) () TableT1CornerDRow
(CENB fall to) (RET1N fall hold) () (t) (cenb_ret1nh) (2.706) () TableT1CornerDRow
TableT1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 2 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextEnd
/pagey exch def
% after table spaceLeft=434
% headerEstimate=82
% estimate=1568
% tailEstimate=44
% spaceLeft=434
/Helvetica-Bold findfont text_size scalefont setfont
(Cycle and Access Timing for Different Values of Extra Margin Adjustment)
(units = ns) pagey SectionStart
/pagey exch def

/pagey pagey 20 sub def
TableT1CornerStart
TableT1CornerHeader
(Read Cycle) (EMAA=0) () (t) (cyca_ema0)  (2.383) ()  TableT1CornerDRow
(Read Cycle) (EMAA=1) () (t) (cyca_ema1)  (2.449) ()  TableT1CornerDRow
(Read Cycle) (EMAA=2) () (t) (cyca_ema2)  (2.543) ()  TableT1CornerDRow
(Read Cycle) (EMAA=3) () (t) (cyca_ema3)  (2.743) ()  TableT1CornerDRow
(Read Cycle) (EMAA=4) () (t) (cyca_ema4)  (2.915) ()  TableT1CornerDRow
(Read Cycle) (EMAA=5) () (t) (cyca_ema5)  (3.148) ()  TableT1CornerDRow
(Read Cycle) (EMAA=6) () (t) (cyca_ema6)  (3.422) ()  TableT1CornerDRow
(Read Cycle) (EMAA=7) () (t) (cyca_ema7)  (3.647) ()  TableT1CornerDRow
(Write Cycle) (EMAB=0) () (t) (cycb_ema0)  (2.507) ()  TableT1CornerDRow
(Write Cycle) (EMAB=1) () (t) (cycb_ema1)  (2.588) ()  TableT1CornerDRow
(Write Cycle) (EMAB=2) () (t) (cycb_ema2)  (2.703) ()  TableT1CornerDRow
(Write Cycle) (EMAB=3) () (t) (cycb_ema3)  (2.909) ()  TableT1CornerDRow
TableT1CornerEnd
/pagey exch def
() (7) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 8 8
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Cycle and Access Timing for Different Values of Extra Margin Adjustment continued) (units = ns) pagey SectionStart
/pagey exch def
/pagey pagey 20 sub def
TableT1CornerStart
TableT1CornerHeader
% spaceLeft=574 after continuation
(Write Cycle) (EMAB=4) () (t) (cycb_ema4)  (3.078) ()  TableT1CornerDRow
(Write Cycle) (EMAB=5) () (t) (cycb_ema5)  (3.298) ()  TableT1CornerDRow
(Write Cycle) (EMAB=6) () (t) (cycb_ema6)  (3.640) ()  TableT1CornerDRow
(Write Cycle) (EMAB=7) () (t) (cycb_ema7)  (3.861) ()  TableT1CornerDRow
(Read Access CLKA) (rise to QA,EMAA=0) () (t) (accqa_rd0) (1.315) (1.463) TableT1CornerDRow
(Read Access CLKA) (rise to QA,EMAA=1) () (t) (accqa_rd1) (1.315) (1.529) TableT1CornerDRow
(Read Access CLKA) (rise to QA,EMAA=2) () (t) (accqa_rd2) (1.315) (1.623) TableT1CornerDRow
(Read Access CLKA) (rise to QA,EMAA=3) () (t) (accqa_rd3) (1.315) (1.823) TableT1CornerDRow
(Read Access CLKA) (rise to QA,EMAA=4) () (t) (accqa_rd4) (1.315) (1.995) TableT1CornerDRow
(Read Access CLKA) (rise to QA,EMAA=5) () (t) (accqa_rd5) (1.315) (2.228) TableT1CornerDRow
(Read Access CLKA) (rise to QA,EMAA=6) () (t) (accqa_rd6) (1.315) (2.502) TableT1CornerDRow
(Read Access CLKA) (rise to QA,EMAA=7) () (t) (accqa_rd7) (1.315) (2.727) TableT1CornerDRow
(Tcc. read clock to write) (clock, EMAA=0) () (t) (cracwb_rd0) (1.234) () TableT1CornerDRow
(Tcc. read clock to write) (clock, EMAA=1) () (t) (cracwb_rd1) (1.300) () TableT1CornerDRow
(Tcc. read clock to write) (clock, EMAA=2) () (t) (cracwb_rd2) (1.394) () TableT1CornerDRow
(Tcc. read clock to write) (clock, EMAA=3) () (t) (cracwb_rd3) (1.594) () TableT1CornerDRow
(Tcc. read clock to write) (clock, EMAA=4) () (t) (cracwb_rd4) (1.766) () TableT1CornerDRow
(Tcc. read clock to write) (clock, EMAA=5) () (t) (cracwb_rd5) (1.999) () TableT1CornerDRow
(Tcc. read clock to write) (clock, EMAA=6) () (t) (cracwb_rd6) (2.273) () TableT1CornerDRow
(Tcc. read clock to write) (clock, EMAA=7) () (t) (cracwb_rd7) (2.498) () TableT1CornerDRow
TableT1CornerEnd
/pagey exch def
() (8) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 9 9
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Cycle and Access Timing for Different Values of Extra Margin Adjustment continued) (units = ns) pagey SectionStart
/pagey exch def
/pagey pagey 20 sub def
TableT1CornerStart
TableT1CornerHeader
% spaceLeft=574 after continuation
(Tcc. write clock to read) (clock, EMAB=0) () (t) (cwbcra_wr0) (1.540) () TableT1CornerDRow
(Tcc. write clock to read) (clock, EMAB=1) () (t) (cwbcra_wr1) (1.620) () TableT1CornerDRow
(Tcc. write clock to read) (clock, EMAB=2) () (t) (cwbcra_wr2) (1.735) () TableT1CornerDRow
(Tcc. write clock to read) (clock, EMAB=3) () (t) (cwbcra_wr3) (1.942) () TableT1CornerDRow
(Tcc. write clock to read) (clock, EMAB=4) () (t) (cwbcra_wr4) (2.111) () TableT1CornerDRow
(Tcc. write clock to read) (clock, EMAB=5) () (t) (cwbcra_wr5) (2.331) () TableT1CornerDRow
(Tcc. write clock to read) (clock, EMAB=6) () (t) (cwbcra_wr6) (2.672) () TableT1CornerDRow
(Tcc. write clock to read) (clock, EMAB=7) () (t) (cwbcra_wr7) (2.893) () TableT1CornerDRow
TableT1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 2 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextEnd
/pagey exch def
% after table spaceLeft=306
% headerEstimate=77
% estimate=154
% tailEstimate=0
% spaceLeft=306
/pagey pagey 5 sub def
(Pin Capacitance) (units = fF) pagey SectionStart
/pagey exch def

/TextFont /Helvetica-Bold findfont text_size scalefont def
/pagey pagey 15 sub def
140 85 line_left 10 add pagey 14 Table1CornerStart
/TextFont /Helvetica findfont text_size scalefont def
Table1CornerHeader
(        CLKA) () (9.6411)     Table1CornerRow
(        CENA) () (1.6720)     Table1CornerRow
(        AA) () (1.0096)     Table1CornerRow
(        CLKB) () (9.7486)     Table1CornerRow
(        CENB) () (1.6560)     Table1CornerRow
(        AB) () (1.0016)     Table1CornerRow
(        DB) () (1.5480)     Table1CornerRow
(        EMAA) () (6.3150)     Table1CornerRow
(        EMAB) () (6.4017)     Table1CornerRow
(        RET1N) () (3.7794)     Table1CornerRow
(        COLLDISN) () (1.1656)     Table1CornerRow
Table1CornerEnd
/pagey exch def
% headerEstimate=77
% estimate=616
% tailEstimate=94
% spaceLeft=75
() (9) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 10 10
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Current) (units = mA) pagey SectionStart
/pagey exch def

/pagey pagey 15 sub def
220 80 line_left 4 add pagey 14 Table1CornerStart
/TextFont /Helvetica-Bold findfont text_size scalefont def
Table1CornerHeader
/TextFont /Helvetica findfont text_size scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(Core Read AC Curr.  \(EMAA=0\)) (1,4) (9.943e-05) Table1CornerRow
(Peri Read AC Curr.  \(EMAA=0\)) (1,4) (1.617e-03) Table1CornerRow
(Core Write AC Curr.  \(EMAB=0\)) (1,4) (1.044e-04) Table1CornerRow
(Peri Write AC Curr.  \(EMAB=0\)) (1,4) (1.654e-03) Table1CornerRow
(Core Read AC Curr.  \(EMAA=1\)) (1,4) (9.943e-05) Table1CornerRow
(Peri Read AC Curr.  \(EMAA=1\)) (1,4) (1.636e-03) Table1CornerRow
(Core Write AC Curr.  \(EMAB=1\)) (1,4) (1.044e-04) Table1CornerRow
(Peri Write AC Curr.  \(EMAB=1\)) (1,4) (1.674e-03) Table1CornerRow
(Core Read AC Curr.  \(EMAA=2\)) (1,4) (9.943e-05) Table1CornerRow
(Peri Read AC Curr.  \(EMAA=2\)) (1,4) (1.649e-03) Table1CornerRow
(Core Write AC Curr.  \(EMAB=2\)) (1,4) (1.044e-04) Table1CornerRow
(Peri Write AC Curr.  \(EMAB=2\)) (1,4) (1.688e-03) Table1CornerRow
(Core Read AC Curr.  \(EMAA=3\)) (1,4) (9.943e-05) Table1CornerRow
(Peri Read AC Curr.  \(EMAA=3\)) (1,4) (1.675e-03) Table1CornerRow
(Core Write AC Curr.  \(EMAB=3\)) (1,4) (1.044e-04) Table1CornerRow
(Peri Write AC Curr.  \(EMAB=3\)) (1,4) (1.715e-03) Table1CornerRow
(Core Read AC Curr.  \(EMAA=4\)) (1,4) (9.943e-05) Table1CornerRow
(Peri Read AC Curr.  \(EMAA=4\)) (1,4) (1.764e-03) Table1CornerRow
(Core Write AC Curr.  \(EMAB=4\)) (1,4) (1.044e-04) Table1CornerRow
(Peri Write AC Curr.  \(EMAB=4\)) (1,4) (1.808e-03) Table1CornerRow
(Core Read AC Curr.  \(EMAA=5\)) (1,4) (9.943e-05) Table1CornerRow
(Peri Read AC Curr.  \(EMAA=5\)) (1,4) (1.865e-03) Table1CornerRow
(Core Write AC Curr.  \(EMAB=5\)) (1,4) (1.044e-04) Table1CornerRow
(Peri Write AC Curr.  \(EMAB=5\)) (1,4) (1.914e-03) Table1CornerRow
(Core Read AC Curr.  \(EMAA=6\)) (1,4) (9.943e-05) Table1CornerRow
(Peri Read AC Curr.  \(EMAA=6\)) (1,4) (1.928e-03) Table1CornerRow
(Core Write AC Curr.  \(EMAB=6\)) (1,4) (1.044e-04) Table1CornerRow
(Peri Write AC Curr.  \(EMAB=6\)) (1,4) (1.980e-03) Table1CornerRow
(Core Read AC Curr.  \(EMAA=7\)) (1,4) (9.943e-05) Table1CornerRow
(Peri Read AC Curr.  \(EMAA=7\)) (1,4) (1.928e-03) Table1CornerRow
(Core Write AC Curr.  \(EMAB=7\)) (1,4) (1.044e-04) Table1CornerRow
(Peri Write AC Curr.  \(EMAB=7\)) (1,4) (1.980e-03) Table1CornerRow
(Core  Peak Curr.) () (1.11208) Table1CornerRow
(Peri  Peak Curr.) () (9.895655) Table1CornerRow
(Core  Deselect Curr. (Port A)) (2,4) (0.000e+00) Table1CornerRow
(Peri  Deselect Curr. (Port A)) (2,4) (1.774e-04) Table1CornerRow
(Core  Deselect Curr. (Port B)) (2,4) (0.000e+00) Table1CornerRow
(Peri  Deselect Curr. (Port B)) (2,4) (3.018e-04) Table1CornerRow
(Core  Standby Default Curr.) (3) (1.098e-04) Table1CornerRow
(Peri  Standby Default Curr.) (3) (5.502e-05) Table1CornerRow
(Core  Standby Selective Precharge Curr.) (3) (1.100e-04) Table1CornerRow
(Peri  Standby Selective Precharge Curr.) (3) (2.070e-05) Table1CornerRow
Table1CornerEnd
/pagey exch def
() (10) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 11 11
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Current continued) (units = mA) pagey SectionStart
/pagey exch def
/pagey pagey 15 sub def
220 80 line_left 4 add pagey 14 Table1CornerStart
/TextFont /Helvetica-Bold findfont text_size scalefont def
Table1CornerHeader
/TextFont /Helvetica findfont text_size scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
% spaceLeft=593 after continuation
(Core  Standby Retention Curr.) (3) (1.113e-04) Table1CornerRow
(Peri  Standby Retention Curr.) (3) (3.543e-06) Table1CornerRow
Table1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 4 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextParaStart
(1) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The AC current value assumes 50% read and write\
 operations, where 50% addresses and 50% of input\
 and output pins switch at the user defined frequency of 1MHz\
 and user defined clock activity_factor of 50%.) TextPiece
( It is assumed that ) TextPiece
()
()
(EMAA)
()
TextFourList
( pins do not switch.) TextPiece
TextParaEnd
TextParaStart
(2) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The deselected current assumes the memory is deselected,\
 50% addresses switch, and 50% of input pins switch\
 at the user defined frequency of 1MHz.\
 The logic switching component of deselected power becomes\
 negligbly small if the input pins are held stable by\
 externally controlling these signals with chip select.) TextPiece
( It is assumed that ) TextPiece
()
()
(EMAA)
()
TextFourList
( pins do not switch.) TextPiece
TextParaEnd
TextParaStart
(3) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The standby current value is independent of frequency\
 and assumes all inputs and outputs are stable.) TextPiece
TextParaEnd
TextParaStart
(4) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The leakage current component is not included in this value.) TextPiece
TextParaEnd
TextParaStart
(5) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(Clock activity factor will affect total current.) TextPiece
TextParaEnd
TextEnd
/pagey exch def
% after table spaceLeft=471
(Clock Noise Limit) () pagey SectionStart
/pagey exch def

/pagey pagey 15 sub def
75 45 45 leftmargin 55 sub pagey 14 TableD1CornerStart
/TextFont /Helvetica-Bold findfont text_size scalefont def
TableD1CornerHeader
/TextFont /Helvetica findfont text_size scalefont def
(CLKA) ( 0.081ns ) ( 0.198V ) TableD1CornerRow
(CLKB) ( 0.081ns ) ( 0.198V ) TableD1CornerRow
TableD1CornerEnd
/pagey exch def

leftmargin 55 sub rightmargin pagey 10 TextStart
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The clock noise limit is the maximum voltage allowed \(for the\
 indicated pulse width\) that does not cause an unintentional\
 memory cycle or other memory failure.) TextLine
TextEnd
/pagey exch def
(Supply Noise Limit) (units = V) pagey SectionStart
/pagey exch def

/pagey pagey 15 sub def
75 90 leftmargin 55 sub pagey 14 Table1CornerStart
/TextFont /Helvetica-Bold findfont text_size scalefont def
Table1CornerHeader
/TextFont /Helvetica findfont text_size scalefont def
(Power) () (0.099) Table1CornerRow
(Ground) () (0.099) Table1CornerRow
Table1CornerEnd
/pagey exch def

leftmargin 55 sub rightmargin pagey 10 TextStart
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The power and ground noise limit is the maximum supply\
 voltage transition that is allowed without causing\
 a memory failure.) TextLine
TextEnd
/pagey exch def
centerx 300 EndingCopyright
() (11) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Trailer
%%Pages: 11
%%EOF
